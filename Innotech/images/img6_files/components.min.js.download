(function($, document){

    // set bindings
    function init() {
        var tagLinks = $('.linkset-container .tag-link');
        $(tagLinks).each( function () {
            $(this).on('click', function(e) {
                e.preventDefault();
                var tagPrefix = $(this).data('tag-id').split(':')[0];
                var tagTitle = $(this).data('tag-title');
                var href = $(this).attr('href').replace('.html','');
                var newTab = $(this).attr('target');
                var wcmParam = $('.linkset-container.edit').length > 0 ? '?wcmmode=disabled' : '';
                if (window.location.href.indexOf('?wcmmode=disabled') > -1) {
                    wcmParam = '?wcmmode=disabled';
                }
                var url = href + '.type=article.p=1.t=' + tagPrefix + ':' + tagTitle + '.html' + wcmParam;
                if (newTab) {
                    window.open(url, newTab);
                } else {
                    window.location = url;
                }
            });
        });
    };

    $(document).on('ready', function () {
        init();
    });

})(jQuery, document);

(function($, document) {
	/* Utility Header */
	if ($('.utility-header').length) {
		var loggedIn,
			firstName,
			authCookie = 'RCO_AUTH',
			cookieZip = 'LOCATION_ZIP',
			defaultZip = '20006',
			defaultRegion = "American Red Cross in the National Capital Region Headquarters",
			
			checkForCookieAuth = function() {
				if (localStorage.getItem(authCookie) !== null) {
					checkAuthValid();
				}
				else {
					loggedIn = false;
					setDropdown();
				}
			},
			checkForCookieZip = function() {
				var value = '; ' + document.cookie,
					parts = value.split('; ' + cookieZip + '=');
				if (parts.length === 2) {
					var zip = parts.pop().split(';').shift();
					if (zip.length > 4) {
						var zipcode = zip;
						setZipCodeBase(zipcode);
					}
				} else {
					setZipCodeBase(defaultZip);
				}
			},
			
			
			checkAuthValid = function() {
				$.ajax({
					url: $( '#api-urls' ).data( 'api-account' )+'/account',
					contentType: "application/json;charset=UTF-8",
					dataType: 'json',
					type: 'GET',
					xhrFields: { withCredentials: true }
				}).done(function(data) {
					firstName = data.personalInfo.firstName;
					loggedIn = true;
					setFirstName();
				}).fail(function() {
					loggedIn = false;
					setDropdown();
					localStorage.removeItem(authCookie);
					localStorage.removeItem(authCookie + '_expiresIn');
				});
				
			},
			
			setFirstName = function() {
				$('.loggedInName').text(firstName);
				setDropdown();
			},
			
			setDropdown = function() {
				if (loggedIn === true) {
					$('.signed-out-dropdown-container').removeClass('active');
					$('.signed-in-dropdown-container').addClass('active');
				} else {
					$('.signed-in-dropdown-container').removeClass('active');
					$('.signed-out-dropdown-container').addClass('active');
				}
			},
			setZipCodeBase = function(zipcode) {
				$('.current-zip').text(zipcode);
				getRegionFromZip(zipcode);
			},
			getRegionFromZip = function(zipcode) {
				$.ajax({
					url: $( '#api-urls' ).data( 'api-lookup' )+'/region-mappings/' + zipcode + '?type=RCO',
					contentType: "application/json;charset=UTF-8",
					dataType: 'json',
					type: 'GET'
				}).done(function(data) {
					if (data.length) {
						var regionCode = data[0].regionCode,
							regionTitle = data[0].regionName;
						if (regionTitle) {
							setRegionLabel(regionTitle);
							setLocalRegionLink(regionCode);
						} else {
							setRegionLabel(defaultRegion);
						}
					} else {
						setRegionLabel(defaultRegion);
					}
				}).fail(function() {});
			},
			setRegionLabel = function(label) {
				$('.current-region-label').text(label);
			},
			setLocalRegionLink = function(regionCode) {
				$.ajax({
					url: '/bin/location-search.regionCode='+ regionCode + '.json',
					contentType: "application/json;charset=UTF-8",
					dataType: 'json',
					type: 'GET'
				}).done(function(data) {
					if (data.landingPageUrl) {
						var regionLink = data.landingPageUrl;
						
						$('.visit-local-site').attr('href', regionLink);
					}
				}).fail(function(jqXHR, textStatus) {});
			},
			signOut = function() {
				$.ajax({
					url: $( '#api-urls' ).data( 'api-auth' ) + '/logout',
					xhrFields: {
						withCredentials: true
					},
					method: 'DELETE'
				}).done(function() {
					localStorage.removeItem(authCookie);
					localStorage.removeItem(authCookie + 'expiresIn');
					var evPayload = {
						event: "rco-logout",
						user: { identities: { userId: null, accountEmail: null } } 
					};
					document.body.dispatchEvent(new CustomEvent('arc-web-event', { detail: evPayload }));
                    sessionStorage.removeItem('storeTransaction');
                    Cookies.set(cookieZip, defaultZip);
				    Cookies.set('LOCATION_ZIP_RECHECK', true);
					location.reload();
				}).fail(function() {});
			},
			invalidateZipCode = function() {
				Cookies.set('LOCATION_ZIP_RECHECK', true);
			};


            var reCheck = Cookies.get('LOCATION_ZIP_RECHECK') === 'true' || Cookies.get('LOCATION_ZIP_RECHECK') === true;
            window.addEventListener('zipCookieChange', function () {
                checkForCookieZip();
            });
			checkForCookieAuth();
            if (!reCheck) {
                checkForCookieZip();
            }

		$('.signed-in-dropdown-container').on('click', 'a', function() {
			if ( $(window).width() < 992 ) {
				$(this).toggleClass('active');
				$('.signed-in-dropdown').toggleClass('active').slideToggle(200);
			} else {
				$(this).removeClass('active');
				$('.signed-in-dropdown').removeClass('active').removeAttr('style');
			}
		});
		$(window).on('resize', function() {
			if ( $(window).width() > 992 ) {
				$('.signed-in-dropdown-container > a').removeClass('active');
				$('.signed-in-dropdown').removeClass('active').removeAttr('style');
				$('.local-dropdown').removeClass('open').removeAttr('style');
			}
		});
		
		$('.local-dropdown-label').on('click', function(e) {
			var $container = $('.local-dropdown-container');
			
			if ( $(window).width() < 992 ) {
				if ( $container.hasClass('open') ) {
					$container.removeClass('open');
					$('.local-dropdown').removeClass('open').slideUp(200);
				} else {
					e.preventDefault();
					$container.addClass('open').find('.local-dropdown').addClass('open').slideDown(200);
				}
			}
		});
		$('.sign-out').on('click', function(e) {
			e.preventDefault();
			signOut();
		});
	}
})(jQuery, document);

(function($) {
	var searchPath = $( '.search-box' ).data( 'search-path' );
	if (searchPath && searchPath.indexOf('.html') === -1) {
		searchPath = searchPath + '.html';
	}
	/* Site Search Section */
	$('.search-toggle span').on('click', function(e) {
		e.stopPropagation();
		$('.site-search-container, .search-toggle').toggleClass('open');
        $('.alert-outer-wrapper').toggleClass('alert-hidden');
    });
	$('#site-search').on('focus', function() {
		$(this).addClass('focused')
	});
	$('#site-search').on('blur', function() {
		if ($(this).val().length <= 0) {
			$(this).removeClass('focused');
		}
	});
	
	
	$('body').on('click', function() {
		$('.site-search-container, .search-toggle').removeClass('open');
        if($(window).width() > 991) {
            $('.alert-outer-wrapper').removeClass('alert-hidden');
        }
    });
	
	$('.search-box').on('click', function(e) {
		e.stopPropagation();
	});

	$('.search-submit').on('click', function() {
        siteSearch();
    });
    $('#site-search').keypress(function (e) {
        if (e.which === 13) {
			siteSearch();
        }
    });

    function siteSearch(){
        var searchTerm = $('#site-search').val();
        window.location.href = searchPath + '/search?term=' + searchTerm + '&page=1&start=0';
	}

})(jQuery);
(function($) {
	$('.main-nav-link').on('click', function() {
		if ( $(window).width() < 992 ) {
			if ( $(this).hasClass('open') ) {
				$('.main-nav-link').removeClass('open');
				$('.dropdown').removeClass('open').slideUp(200);
			} else {
				$('.main-nav-link').removeClass('open');
				$('.dropdown').removeClass('open').slideUp(200);
				$(this).addClass('open').next('.dropdown').addClass('open').slideDown(200);
			}
		}
	});
	$('.primary-a').on('click', function (e) {
		if ($(window).width() > 992 && $('body').hasClass('is-touching') && !$(this).hasClass('touched')) {
			e.preventDefault();
			e.stopPropagation();
			$('.primary-a').removeClass('touched');
			$(this).addClass('touched');
		}
	});
	$(window).on('click', function() {
		if (!$(this).hasClass('primary-a')) {
			$('.primary-a').removeClass('touched');
		}
	});

	$('.dropdown-wide').on('click', '.secondary-header-li', function() {
		if ( $(window).width() < 992 ) {
			if ( $(this).hasClass('open') ) {
				$('.secondary-header-li').removeClass('open');
				$('.dropdown-wide .secondary-links').removeClass('open').slideUp(200);
			} else {
				$('.secondary-header-li').removeClass('open');
				$('.dropdown-wide .secondary-links').removeClass('open').slideUp(200);
				$(this).addClass('open').next('.secondary-links').addClass('open').slideDown(200);
			}
		}
	});
	
	$(window).on('resize', function() {
		if ( $(window).width() > 991 ) {
			$('.dropdown, .secondary-links').removeAttr('style');
			$('.main-nav-link, .dropdown, .secondary-header-li, .secondary-links').removeClass('open');
		}
	});

	window.addEventListener('touchstart', function onFirstTouch() {
		$('body').addClass('is-touching');
		window.removeEventListener('touchstart', onFirstTouch, false);
	}, false);
	
})(jQuery);
/* Main Nav Section */
var $dropdown = $('.main-nav-section').find('.dropdown');

$dropdown.each(function() {
	var $this = $(this),
		$linksContainer = $this.find('.secondary-links'),
		$links = $linksContainer.children('li').length;
	if ($links === 0) {
		$this.siblings('.main-nav-link').addClass('no-secondary');
	}
});

// Set left positioning of 2 column dropdowns based on their index
var navSections = $('.mainnavsection');
navSections.each(function(index) {
	if (index > (navSections.length / 2)) {
		if ( $(this).find('.dropdown-double').length !== 0 ) {
			$(this).find('.dropdown-double').addClass('right-align');
		}
	}
});

(function($) {
	/* Header */
	$('.navbar-toggle, .bg-fade').on('click', function() {
		$('.mobile-menu, .bg-fade, body, html').toggleClass('open');
        $('.alert-outer-wrapper').toggleClass('alert-hidden');
	});

	$(window).on('resize', function() {
		if($(window).width() > 991) {
			$('.mobile-menu, .bg-fade, body, html').removeClass('open');
            $('.alert-outer-wrapper').removeClass('alert-hidden');
        }
	});

	// conditionally add classes for stickynav
	if($('header .global-nav.outer').data('stickynav') === 'sticky') {
		$('header').addClass('stickynav');
	}

})(jQuery);

(function($){
    
    // IE fallback for non-aspect hero image using srcset
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf("MSIE ");
    var srcsetFallbackImgs = document.querySelectorAll('img.srcset-ie-fallback');
    if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) {
        $(".is-video-background").addClass("ie");
        if (srcsetFallbackImgs.length > 0) {
            $(window).on('load resize', function() {
                $(srcsetFallbackImgs).each( function() {
                    var img = $(this);
                    if (window.innerWidth < 768) {
                        var mobImg = $(img).data('mobile-img');
                        $(img).attr('src', mobImg);
                        $(img).attr('srcset', mobImg);
                    } else {
                        var lgImg = $(img).data('large-img');
                        $(img).attr('src', lgImg);
                        $(img).attr('srcset', lgImg);
                    }
                });
            });
        }
    }

    // sets appropriate alt text on image
    function setAltsByWidth() {
        var key = $(window).width() < 767 ? "mobileAlt" : "desktopAlt";

        $(".hero-image-container").each(function () {
            var dataSet = $(this).data();
            var imgTag = $(this).find(".srcset-ie-fallback"); // check for internal img tag (when preserve aspect ration is used)

            if (key in dataSet) { // make an alt tag has been set
                if (imgTag.length ==  0) { // there's no image tag inside the div so add aria label to container
                    $(this).attr("aria-label", dataSet[key]);
                } else { // there is an image tag, so add alt prop to it.
                    imgTag.attr("alt", dataSet[key])
                }
                
            }
        });
    }

    setAltsByWidth();
    $(window).on('resize', setAltsByWidth); // update alts on resize



    if ($(".is-video-background").length) {
        function setMobileHeroVideo() {
            $(".hero-video.desktop").each(function() {
                $(this).removeClass("desktop").addClass("mobile");
                var src = $(this).closest(".hero-image").data("hero-mobile-video");
                loadVideo($(this), src);
            });
        }
        function setDesktopHeroVideo() { 
            $(".hero-video.mobile").each(function() {
                $(this).removeClass("mobile").addClass("desktop");
                var src = $(this).closest(".hero-image").data("hero-desktop-video");
                loadVideo($(this), src);
            });
        }
    
        function loadVideo(el, src) {
            if (src) {
                el.find("source").attr("src", src);
                var video = el.get(0);
                video.load();
                video.play();
                el.removeClass("hidden");
            }
            else {
                el.addClass("hidden");
            }
        }
    
        // Change video background based on viewport size
        $(window).resize(function() {
            if ($(window).width() < 767) {
                setMobileHeroVideo();
            }
            else {
                setDesktopHeroVideo();
            }
        });
    
        // Init video backgrounds
        $(".is-video-background").each(function() {
            var src, type;
            if ($(window).width() < 767) {
                src = $(this).data("hero-mobile-video");
                type = "mobile";
            }
            else {
                src = $(this).data("hero-desktop-video");
                type = "desktop";
            }
            if (src) {
                $(this).find(".hero-image-container").prepend("<video aria-label=\"Decorative background video\" class=\"hero-video " + type + "\" muted autoplay loop playsinline><source src=\"" + src +"\"></source></video>");
            }
            else {
                $(this).find(".hero-image-container").prepend("<video aria-label=\"Decorative background video\" class=\"hero-video " + type + " hidden\" muted autoplay loop playsinline><source src=\"\"></source></video>");
            }
        });
    }

    // Zip/sponsor search
    $(document).on('keydown', '#ziporsponsor', function(event){
        if(event.keyCode === 13 ){
        event.preventDefault();
        doQuery(event.target);
        }
    });

    $(document).on('click', '.form-drive-list .redcross-button', function(event){
        event.preventDefault();
        doQuery(event.target);
    });

    function doQuery(eventEl){
        var $submittedForm = $(eventEl).closest('.form-drive-list'),
            $zipSponsorEl = $submittedForm.find('#ziporsponsor'),
            zipSponsor = $zipSponsorEl.val(),
            $ctaButton = $submittedForm.find('.redcross-button');
        if(!zipSponsor){
        $zipSponsorEl.attr('placeholder', '*Required');
        $zipSponsorEl.attr('data-aa-drive-search-error', 'zip-required');
        $zipSponsorEl.addClass('error-border');
        } else {
        var encodedSponsorCode = encodeURIComponent(zipSponsor);
        var url = $ctaButton.find('a').attr('href') + '/drive-results?zipSponsor=' + encodedSponsorCode;
        window.open(url, '_self');
        }
    }


})(jQuery);
(function($, document) {
    $(".rich-text-editor-content").each(function() {
        $(this).find("a").each(function() {
            // Only set data-aa-link-button value if the attribute is not set by the author.
            const attr = $(this).attr("data-aa-link-button");
            if (typeof attr == 'undefined' || attr == false) {
                $(this).attr("data-aa-link-button", $(this).text().replace(/\s/g, "-"));
            }
        })
    });
})(jQuery, document);
(function($){
    let currentActiveSection = -1; // start with no active sections
    let sectionMap; // holder for jumplink section positions
    const  nav = $('nav.vertical.jump-links-container'); // jquery obj for nav
    const headerHeight = ($("header.stickynav").length || $("header.rcb-header").length)? $("header").height() : 0; // account for sticky header
    let contentTop = $(document).scrollTop() + headerHeight + 60; // top of visible content (with a 60px pad).

    function debounce(func, wait) {
        var timeout;
      
        return function executedFunction() {
          var context = this;
          var args = arguments;
              
          var later = function() {
            timeout = null;
            func.apply(context, args);
          };
                
          clearTimeout(timeout);
      
          timeout = setTimeout(later, wait);
        };
    };

    function manageLinks() {
        var targets = $('.jump-link-target[id]');
        var nav = $('.jump-links-container');
        var layout = nav.data('layout');

        if (!nav.hasClass('edit-mode') && layout) {
            if (targets.length) {
                if (layout === 'vertical') {
                  buildSections();
                }
                buildList(nav, layout);
                addConditionalClasses(layout);
                bindEvents();
            } else {
                nav.hide();
            }
        }
    }

    function buildList(nav, layout) {
        var navTitle = nav.data('title');

        var targets = $('.jump-link-target[id]');

        var htmlString = '<div class="jump-link-navigation" data-context="jump-link">';
        if (layout === "horizontal" && navTitle !== undefined && navTitle !== '') {
            htmlString += '<h4 class="linkset-title">' + navTitle + '</h4>';
        }
        htmlString += '<ul class="jump-link-list">';
        targets.each(function (index, el) {
            var stop = $(this).data('stop-jump-links');
            if (stop) {
                return false;
            }
            var jumpTarget = $(this).attr('id');
            var jumpText = $(this).data('jump-text');
            var jumpLinkAnalytics = $(this).data('jump-link-analytics');

            if (jumpTarget !== undefined && jumpTarget !== '') {
                htmlString += '<li class="jump-link-item"><a href="#' + jumpTarget + '" data-aa-jump-link="' + jumpLinkAnalytics + '">' + jumpText + '</a></li>';
            }

            var sectionLabel = $(this).closest('.section-toggle').find('.section-button-label');
            if (sectionLabel.length) {
                sectionLabel.text(jumpText);
            }
        });
        htmlString += "</ul></div>";
        nav.html(htmlString);
    }

    function buildSections() {
        var sectionControls = $('.section-control');
        var firstID = $('.section-control-container[id]').first();
        var parent = sectionControls.first().parent();
        var currentContainer;
        var start, stop;
        sectionControls.each(function(index) {
            var _this = $(this);
            var currentSection = _this.find('.section-control-container');
            if (!start && !currentSection.is(firstID)) {
                parent.append(_this);
            } else if (stop || currentSection.data('stop-jump-links')) {
                stop = true;
                parent.append(_this);
            } else {
                if (currentSection.attr('id')) {
                    start = true;
                    var container = $('<div class="section-toggle-container"></div>');
                    var toggle = $('<div class="section-toggle"></div>').append($('<div class="section-toggle-header clearfix"></div>').append($('<a class="toggle section-button"></a>').append($('<span class="plus-minus"></span>')).append($('<span class="section-button-label"></span>'))));

                    currentContainer = container.appendTo(toggle);
                    parent.append(toggle);
                }
                currentContainer.append(_this);
            }
        });
        parent.append($('.back-to-top-button.parbase'));
    }

    function addConditionalClasses(layout) {
        if (layout === "vertical") {
            $('.jump-link-navigation').addClass('column-container');
            $('.jump-link-list').addClass('col-md-2');
            $('.jump-link-item:first-child').addClass('active');

            var nav = $('nav.vertical.jump-links-container'),
                topAnchor = $('.section-control-container[id]').first(),
                top = parseInt(topAnchor.offset().top);
            
            if (topAnchor.length) {
                nav.css('position', 'absolute');
                nav.css('top', top + 50);
            }
        } else {
            $('.jump-links-container').addClass('column-container');
            $('.jump-link-item').addClass('col-md-6');
        }
    }

    // jquery chokes on special chars in selectors, they have to be escaped by a \\    
    function escapeSelector(selector) {
        return selector.replace(/[!"$%&'()*+,.\/:;<=>?@[\\\]^`{|}~]/g, "\\$&")
    }

    function mapSections() {
        const linkMap = []
        // Get the <a> tags from the jumplink nav. 
        const jumpLinks = $(".jump-link-item > a");

        // interate through jumplinks, Add top and bottom positions of each corresponding section to map
        for(i = 0; i < jumpLinks.length; i++) {
            try {
                const jumpLink = jumpLinks.eq(i); // current jumplink = ith jumplnik
                const sectionId = jumpLink.attr("href"); // jummplink href will be id of corresponding section div
                const section = $(escapeSelector(sectionId)); // jquery object of section div
                const sectionTop = parseInt(section.offset().top, 10); 
                const sectionBottom = parseInt(sectionTop + section.outerHeight(), 10) ;
                linkMap.push({top: sectionTop, bottom: sectionBottom, id: sectionId })
            } catch(e) {
                // don't let an error here stop further js execution.
                console.error(e)
                continue;
            }
        };

        return linkMap
    }
   
    const highlightActiveLink = debounce(function() {
        // get the currently active section (or -1 if we're outside the jumplink sections)
        const activeSection = sectionMap.findIndex((section, index) => {
            const sectionEnd = index < sectionMap.length -1 ? sectionMap[index + 1].top : section.bottom;
            return section.top <= contentTop && sectionEnd >= contentTop;
        })

        if (activeSection !== currentActiveSection) { // we only care if the section has changed
            currentActiveSection = activeSection; // update active section
            $('.jump-link-item.active').removeClass('active'); // clear old active
            if(activeSection > -1) { // if we're in the jumplinks sections
                const newLinkId = sectionMap[activeSection].id;
                const navLink = $('ul.jump-link-list').find(`a[href='${newLinkId}']`);
                $(navLink).parent().addClass("active");
                
            }
        }
    }, 50);

    const moveNav = debounce(function() {

        // style is in rems so calculate that in pixels.
        const navOffset = parseFloat(getComputedStyle(document.documentElement).fontSize) * 21.5; 
        const navPadding = 50;
        const sectionTop = sectionMap[0].top;
        const sectionBottom = sectionMap[sectionMap.length -1].bottom;

        const rangeTop = sectionTop - navOffset + navPadding;
        const rangeBottom = sectionBottom - nav.outerHeight() - navPadding - navOffset;

        // scroll is above jumplink sections (nav positioned to top of top section)
        if (contentTop < rangeTop) {
            nav.css({'position': 'absolute', 'top': sectionTop + 50 });
        }

        // scroll is inside jumplink sections (nav is fixed at 21.5rem) 
        if(contentTop >= rangeTop && contentTop <= rangeBottom) {
            nav.css({'position': '', 'top': ''});
        }
        
        // scroll is below jumplink sections (nav position bottom of bottom section)
        if (contentTop > rangeBottom) {
            nav.css({'position': 'absolute', 'top': rangeBottom + navOffset});
        }
    })

    // handle link clicks
    function scrollToSection(e) {
        e.preventDefault(); 

        // account for stickynavs
        var headerHeight = ($("header.stickynav").length || $("header.rcb-header").length)? $("header").height() :0;

        const sectionId = $(this).attr('href'); // link's href is the id of the corresponding section
        
        // do the scroll with a jQuery animation
        jQuery('html, body').animate({
            scrollTop: $(escapeSelector(sectionId)).offset().top - headerHeight
        }, 500);

        $('.jump-link-item.active').removeClass('active'); // clear old active
        $(this).parent().addClass("active"); // add new active
    }
  

    // Event-based functionality
    function bindEvents() {
        // Jumplink Clicks
        $('.jump-link-item').on('click', 'a', scrollToSection);

        // Resize/Scroll Events
        $(window).on('scroll resize', () => {
            sectionMap = mapSections(); // get positions of sections
            contentTop = $(document).scrollTop() + headerHeight + 60; // top of visible content (with a 60px pad).

            highlightActiveLink(); // highlight currently-viewed section
            moveNav(); // position jumplink nav
        });

        $('.section-button').on('click', function() {
            $(this).find('.plus-minus, .section-button-label').toggleClass('open');
            var container = $(this).closest('.section-toggle').find('.section-toggle-container');
            var carousels = container.find('.image-carousel-main,.rco-carousel-main');
            container.slideToggle('fast', function() {
                container.toggleClass('expanded');
                if (container.hasClass('expanded')) {
                    carousels.each(function () {
                        var sliders = $(this).find('.slick-slider');
                        sliders.slick('setPosition');
                    });
                }
            });
        });
    }

    $(document).on('ready', manageLinks);
})(jQuery);
jQuery(function($) {
    var mainTab = $(".tabbed-content-main-desk");
    mainTab.each(function() {
        var that = this;
        $(this).find('.tab-content-trigger').click(function(){
            var tab_id = $(this).attr('data-tab');

            $(that).find('.tab-content-trigger').removeClass('current');
            $(that).find('.tab-content').removeClass('current');

            $(this).addClass('current');
            $(that).find("#"+tab_id).addClass('current');
        });
    });
});


(function($, document) {

    var CONSTANTS = {
        DOLLAR_HANDLES_HERO : 'hero-dollar-handle ',
        DOLLAR_HANDLES_CTA : 'dollar-handle-cta-panel ',
        FIND_A_DRIVE_CTA : 'find-a-drive-cta-panel ',
        FIND_A_DRIVE_COMBO : 'find-a-drive-and-list-of-drives-combo ',
        SIGN_IN : 'sign-in ',
        TAG_SEARCH : 'tag-search ',
        SUBMIT_BUTTON_DATA_ATTR : 'data-aa-submit-button'
    };

    $(document).on('ready', function(){
        var buttons = $('.redcross-submit-button button');
        $(buttons).each(function(){
            var button = $(this);
            var dataAaAttr = $(button).attr(CONSTANTS.SUBMIT_BUTTON_DATA_ATTR);
            var type = $(button).closest('[data-aa-type]').attr('data-aa-type');

            if (type && type.indexOf('dollar-handle') > -1) {
                if ($(button).closest('.hero-image') && $(button).closest('.hero-image').length > 0) {
                    $(button).attr(CONSTANTS.SUBMIT_BUTTON_DATA_ATTR, CONSTANTS.DOLLAR_HANDLES_HERO + dataAaAttr);
                } else {
                    $(button).attr(CONSTANTS.SUBMIT_BUTTON_DATA_ATTR, CONSTANTS.DOLLAR_HANDLES_CTA + dataAaAttr);
                }
            } else if (type && type.indexOf('find-a-drive') > -1) {
                if ($(button).closest('.hero-image') && $(button).closest('.hero-image').length > 0) {
                    $(button).attr(CONSTANTS.SUBMIT_BUTTON_DATA_ATTR, CONSTANTS.FIND_A_DRIVE_COMBO + dataAaAttr);
                } else {
                    $(button).attr(CONSTANTS.SUBMIT_BUTTON_DATA_ATTR, CONSTANTS.FIND_A_DRIVE_CTA + dataAaAttr);
                }
            } else if (type && type.indexOf('rcb-sign-in') > -1) {
                    $(button).attr(CONSTANTS.SUBMIT_BUTTON_DATA_ATTR, CONSTANTS.SIGN_IN + dataAaAttr);
            } else if (type && type.indexOf('tag-search-button') > -1) {
                    $(button).attr(CONSTANTS.SUBMIT_BUTTON_DATA_ATTR, CONSTANTS.TAG_SEARCH + dataAaAttr);
            }

        });
    });

})(jQuery, document);
(function(window) {
    function openInNewWindow(e) {
        e.preventDefault();
        e.stopPropagation();
        let href = e.currentTarget.getAttribute("href");
        window.open(href, "_blank", "location=yes,height=400,width=620,scrollbars=yes,status=yes");
    };

    function toggleOtherLinks(e) {
        e.stopPropagation();
        const otherLinks = e.currentTarget.nextElementSibling;
        const wasHidden = otherLinks.classList.contains("hidden");
        const allOtherLinks = document.querySelectorAll(".social-share-container .other-links");
        // Hide all other social menus on the page
        for (let i=0;i<allOtherLinks.length;i++) {
            allOtherLinks[i].classList.add("hidden");
        }
        
        // Show this one if it was originally hidden
        if (wasHidden) {
            otherLinks.classList.remove("hidden");
        }
    }

    // Override default functionality and force links to open in new popup window
    const links = document.querySelectorAll(".social-share-container .share-buttons .share-link");
    for (let i = 0; i < links.length; i++) {
        links[i].addEventListener("click", openInNewWindow);
    }
    
    const otherBtns = document.querySelectorAll(".social-share-container .other-social-links-dropdown");
    for (let i = 0; i < otherBtns.length; i++) {   
        otherBtns[i].addEventListener("click", toggleOtherLinks); // Toggle other links dropdown when user clicks "other" button
        otherBtns[i].classList.remove("hidden");    // Unhide "other" button once javascript loads (functionality is dependent on js)
    }

    // Hide other links dropdown when user clicks outside dropdown
    const otherDropdown = document.querySelectorAll(".social-share-container .other-links");
    document.body.addEventListener("click", function(e) {
        for (let i = 0; i < otherDropdown.length; i++) {
            otherDropdown[i].classList.add("hidden");
        }
    });
})(window);

(function($, document) {
    if ($(".section-mobile-carousel").length) {
        const sectionControlCarouselMaxWidth = 992;
        $(".section-mobile-carousel").each(function() {
            var section = $(this);
            var smallCols = section.find(".par-25+.par-25");
            if (smallCols) {
                smallCols.parent().addClass("section-carousel-items").addClass("rco-carousel-main");
                var smallItems = section.find(".par-25");
                for (var i=0;i<smallItems.length;i+=2) { 
                    $(smallItems[i]).removeClass("par-25").addClass("par-50").addClass("col-lg-6").removeClass("col-lg-3");
                    $(smallItems[i+1]).removeClass("par-25").addClass("par-50").addClass("col-lg-6").removeClass("col-lg-3");
                    smallItems.slice(i,i+2).wrapAll("<div class='pl-lg-0 pr-lg-0 par-50 multi col-lg-6 section-par three-col-50-25-25'><div class='row mobile-carousel'></div></div>");
                }
            }
        });
        $(window).on('resize', function() {
            var carouselIsActive = $(".section-mobile-carousel .slick-initialized").length > 0;
            if (window.innerWidth < sectionControlCarouselMaxWidth && !carouselIsActive) {
                initCarousels();
            }
            else if (window.innerWidth >= sectionControlCarouselMaxWidth && carouselIsActive) {
                removeCarousels();
            }
        });
        function removeCarousels() {
            $(".slick-initialized").each(function() {
                $(this).slick('unslick');
            });
        }
        function initCarousels() {
            $(".section-carousel-items").each(function() {
                $(this).slick({
                    slidesToShow: 1,
                    slidesToScroll: 1,
                    autoplay: false,
                    infinite: true
                });
            });
        }
        if (window.innerWidth < sectionControlCarouselMaxWidth) {
            initCarousels();
        }
    }
    var isIE11 = /Trident.*rv[ :]*11\./.test(navigator.userAgent);
    if(isIE11) {
        $('.uniform-heights').addClass('ie-eleven');
    } else {
        $('.uniform-heights').addClass('not-ie-eleven');
    }

    var hasRapidPass = $('.section-control-container.column-container:has(.rapid-pass)');
    var contentCenterContainer = hasRapidPass.find('.justify-content-center');
    var containerFluid = hasRapidPass.find('.container-fluid.main-content');
    var initialWindowWidth = window.innerWidth;
    rapidPassChanges(initialWindowWidth);
    $(window).on('resize', function() {
        var windowWidth = window.innerWidth;
        rapidPassChanges(windowWidth);
    });

    function rapidPassChanges(windowWidth) {
        if (hasRapidPass.length) {
            $('body').addClass('hide-overflow-x');
            if (windowWidth > 768 && windowWidth < 992) {
                contentCenterContainer.removeClass('justify-content-center');
                containerFluid.addClass('tablet-rapid-pass');
            } else if (windowWidth >= 992) {
                contentCenterContainer.addClass('justify-content-center');
                containerFluid.removeClass('tablet-rapid-pass');
            }
        }
    }
    if ($(".section-control-container.edit").length == 0) {
        $(".section-control-container[data-region-codes]").each(function() {
            var regions = $(this).data("region-codes").toString().split(",");
            var type = $(this).data("region-type");
            var regionCode = Cookies.get('REGION_CODE');
            showThisSection = isCorrectAudience(regions, regionCode, type);
            
            if (showThisSection && $(this).data("subsource-codes")) {   // Verify correct subsource codes too if applicable
                var subsources = $(this).data("subsource-codes").toString().split(",");
                type = $(this).data("subsource-type");
                var subsourceCode = getCurrentSubcode();
                showThisSection = isCorrectAudience(subsources, subsourceCode, type);
            }
            showOrHide(showThisSection, $(this));
        });
    
        $(".section-control-container[data-subsource-codes]").each(function() { // Validate all other subsource code filtered sections
            var subsources = $(this).data("subsource-codes").toString().split(",");
            var type = $(this).data("subsource-type");
            var subsourceCode = getCurrentSubcode();
            var showThisSection = isCorrectAudience(subsources, subsourceCode, type);
            showOrHide(showThisSection, $(this));
        });
        function getCurrentSubcode() {
            var query = window.location.search;
            if (query.indexOf("subcode=") > -1) {   // Check if subsource code is set in url and prioritize that
                return query.match(/[?&]subcode=([\w\d-_]*)/)[1];
            }
            return Cookies.get('subcode');
        }
        function isCorrectAudience(codes, cookie, type) {
            var isInclude = (type == "include");
            var showThisSection = (type == "exclude");
            for (var i=0;i<codes.length;i++) {
                if (codes[i].trim() === cookie) {
                    showThisSection = isInclude;  // Is correct if including code, is incorrect if excluding
                    i = codes.length; // End loop
                }
            }
            return showThisSection;
        }
        function showOrHide(value, el) {
            if (value) {
                el.removeClass("hidden"); // Show section if user is in correct audience
            }
            else {
                el.remove(); // Remove section from DOM if user is not in correct audience
            }
        }
    }
})(jQuery, document);
jQuery(function($) {

    //check if alert banner is there
    if ($('div.banner-embed').length) {
        $('.social-links-embed-non-hidden').addClass('social-with-banner');
        $('.drop-arrow-container').addClass('arrow-with-banner');
    }
    // Tablet breakpoint
    var bpTablet = 992;
    $('.link-block.current-block').click(function () {
        // Toggle breadcrumbs on mobile and tablet
        if ($(window).width() < bpTablet) {
            $('.link-block.collapseable').slideToggle({start: function() {
                jQuery(this).css('display','flex');
            }});
            $('.current-block').find('i').toggleClass('rco-ui-icon-chevron-down rco-ui-icon-chevron-up');
        }
    });
});

(function($){
    var lightbox = $(".lightbox-container").first();
    if (lightbox != null) {
        var isAuthor = $(".section-control-container.edit").length || lightbox.hasClass("is-author");
        if (!isAuthor) {
            var NEW_PAGE_VISITOR = "LIGHTBOX_NEW_PAGE_VISITOR";
            var LIGHTBOX_MODIFIED_DATE = "LIGHTBOX_MODIFIED";
            var LIGHTBOX_SESSION = "LIGHTBOX_SESSION" + window.location.pathname;
            var LIGHTBOX_TIMED = "LIGHTBOX_TIMED";

            // Cookies set to the path "/" affect the whole site. Homepages need special cookie name.
            if (window.location.pathname == "/") {
    			LIGHTBOX_MODIFIED_DATE = "LIGHTBOX_MODIFIED_HOME";
    			LIGHTBOX_TIMED = "LIGHTBOX_TIMED_HOME";
            }

            // Check if user has visited the ARC website before
            var isNewVisitor = Cookies.get(NEW_PAGE_VISITOR) == null;
            if (isNewVisitor) {
                Cookies.set(NEW_PAGE_VISITOR,"new");

            }
            else {
                Cookies.set(NEW_PAGE_VISITOR,"old");
            }
            var modifiedDate = lightbox.data("modified");
            var audience = lightbox.data("audience");
            var expiration = lightbox.data("expiration");
            var isCorrectAudience = audience == Cookies.get(NEW_PAGE_VISITOR) || audience == "" || audience == null;  // Audience matches cookie var or audience isn't specified
            if (expiration == "session") {
                if (sessionStorage.getItem(LIGHTBOX_SESSION) != null) {
                    isCorrectAudience = false;
                }
                else {
                    sessionStorage.setItem(LIGHTBOX_SESSION, true);
                }
            }
            else if (expiration == "content" && modifiedDate == Cookies.get(LIGHTBOX_MODIFIED_DATE)) {  // Don't display if lightbox is set to only show once and it has already been displayed
                isCorrectAudience = false;
            }
            else if (expiration == "timed") {
                var expTime = lightbox.data("expiration-time");
                if (expTime == null || expTime == "") {
                    expTime = 0;
                }
                if (Cookies.get(LIGHTBOX_TIMED) != null) {
                    isCorrectAudience = false;
                }
                else {
                    Cookies.set(LIGHTBOX_TIMED, true, { expires: expTime, path: window.location.pathname });
                }
            }
            Cookies.set(LIGHTBOX_MODIFIED_DATE, modifiedDate, { path: window.location.pathname});
            var triggerOnExit = lightbox.data("on-exit");
            
            if (isCorrectAudience) {
                lightbox.appendTo("body");  // Move lightbox element to end of page
                setAriaAttributes(lightbox);
                if (triggerOnExit) {    // Wait until mouse leaves viewport to show lightbox
                    document.querySelector("html").addEventListener("mouseleave", function handler(e) {
                        showLightBox(lightbox);
                        e.currentTarget.removeEventListener(e.type, handler);
                    });
                }
                else {  // Show lightbox now
                    var loadTime = lightbox.data("load");
                    setTimeout(function(){showLightBox(lightbox)}, loadTime * 1000);
                }
            }
        }
        else { // Lightboxes in XFs are displayed as wcm disabled even in author. Need to manually update the classes in these cases.
            lightbox.removeClass("hide");
        }
    }
    function showLightBox(lightbox) {
        lightbox.fadeIn(800, function() {
            setLightboxFunctionality(lightbox);
        });
    }
    function setAriaAttributes(lightbox) {
        var ariaLabelId = "lightbox-dialog-label";
        var ariaDescId = "lightbox-dialog-desc";
        lightbox.attr("aria-labelledby", ariaLabelId);
        lightbox.attr("aria-describedby", ariaDescId);
        var textContent = lightbox.find(".content h2, h3, p");
        textContent.first().attr("id",ariaLabelId);
        if (textContent.length > 1) {
            textContent.last().attr("id", ariaDescId);
        }
        else {
            textContent.first().attr("id", ariaDescId);
        }
    }
    function setLightboxFunctionality(lightbox) {
        
        var originalSelected = $(":focus"); // Currently focused element
        var clickables = lightbox.find("a, button");
        var firstClickableElement = lightbox.find(".close button");
        var lastClickableElement = clickables[clickables.length-1];
        firstClickableElement.focus();

        // For ADA compliance, make tabbing only cycle through modal links
        $('.start-of-popup').focus(function() {
            lastClickableElement.focus();
        });
        $('.end-of-popup').focus(function() {
            firstClickableElement.focus();
        });

        // Function to fade out/close lightbox
        function closeLightbox() {
            lightbox.fadeOut(800, function() {
                originalSelected.focus();
            });
        }
        // Close lightbox when close button is clicked
        firstClickableElement.click(function() {
            closeLightbox();
        });
        // Close lightbox when user clicks outside of lightbox
        lightbox.click(function(e) {
            e.stopPropagation();
            closeLightbox();
        });
        // Prevent lightbox from closing when lightbox itself is clicked
        lightbox.find(".lightbox-pop-up-cmp").click(function(e) {
            e.stopPropagation();
        });
        
        // Links without href attribute
        var continueToSiteLink = lightbox.find("a:not([href])");
        continueToSiteLink.attr("tabindex","0");

        // Close lightbox when link (<a>) without 'href' is clicked
        continueToSiteLink.click(function() {
            closeLightbox();
        });
        // Close lightbox when link (<a>) without 'href' is focused and user hits 'enter' key
        continueToSiteLink.on('keypress',function(e) {
            if (e.which == 13) {
                closeLightbox();
            }
        });
    }
})(jQuery);
jQuery(function($) {
    
    let imageCarouselMain = $(".image-carousel-main");
    let imageCarousel = $(".image-carousel-items");

    imageCarouselMain.each(function(i) {

        let carouselInstanceClass = "image-carousel-" + i;

        $(this).addClass(carouselInstanceClass);

        let desktopHeight = $(this).data("height");
        let mobileHeight = $(this).data("mobileheight");
        let bgColor = $(this).data("background");

        $("head").append('<style type="text/css" class="' + carouselInstanceClass + '"></style>');
        if (bgColor) {
            $("head ." + carouselInstanceClass).append('.' + carouselInstanceClass + '.restricted-height .slick-slide { background-color: ' + bgColor + '; }');
        }
        if (mobileHeight > 0) { 
            $("head ." + carouselInstanceClass).append('@media (max-width: 575.98px) { .' + carouselInstanceClass + '.restricted-height .image-carousel-items img { max-height: ' + mobileHeight + 'px; max-width: 100%; width: auto; margin: auto; } }');
        }
        if (desktopHeight > 0) { 
            $("head ." + carouselInstanceClass).append('@media (min-width: 576px) { .' + carouselInstanceClass + '.restricted-height .image-carousel-items img { max-height: ' + desktopHeight + 'px; max-width: 100%; width: auto; margin: auto; } }');
        }

    });

    imageCarousel.each(function() {
        $(this).slick({
            slidesToShow: 1,
            slidesToScroll: 1,
            autoplay: false,
            infinite: true,
        });
    });
});

jQuery(function($) {
    $('.icon-card-main').each(function() {
        var link = $(this).find('.redcross-button a:first').attr('href'),
        target = $(this).find('.redcross-button a:first').attr('target'),
        icon = $(this).find('.icon-link a:first');

        icon.attr('href',link);
        icon.attr('target',target);

        $(".iconcard").attr("data-context","iconcard");
    });
});

jQuery(function($) {
  $('.iframe-container').each(function() {
    var $this = $(this);
    var src1 = $this.data('iframeurl');
    var queryParam = getParameterByName('thrive_category');
    if (queryParam != null) {
      src1 = src1 + "?thrive_category=" + queryParam;
      $this.find('iframe').prop('src', src1);
    }
  });
});

function getParameterByName(name) {
  var url = window.location.href;
  name = name.replace(/[\[\]]/g, "\\$&");
  var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
      results = regex.exec(url);
  if (!results) return null;
  if (!results[2]) return '';
  return decodeURIComponent(results[2].replace(/\+/g, " "));
}

jQuery(function($) {
        $(".generic-cta-panel").attr("data-context","generic-cta-panel");
});
(function($,document) {

    $(document).on('ready', function(){
        var reCheck = Cookies.get('LOCATION_ZIP_RECHECK') === 'true' || Cookies.get('LOCATION_ZIP_RECHECK') === true;
        window.addEventListener('zipCookieChange', function () {
            var zipCookie = Cookies.get('LOCATION_ZIP') || '20006';
            $('#find-a-drive-cta-zip').val(zipCookie);
        });
        if (!reCheck) {
            var zipCookie = Cookies.get('LOCATION_ZIP') || '20006';
            $('#find-a-drive-cta-zip').val(zipCookie);
        }
    });
	$('#find-a-drive-cta').on('click', 'button', function (e) {
		e.preventDefault();
		var searchZipcode = $('#find-a-drive-cta-zip').val(),
			validZip = /^(?!0{3})\d{5}$/.test(searchZipcode),
			error = $('.findadrive-cta-panel').find('.invalid-zip'),
			queryInfo = $('#query-info'),
			range = 10,
			dateRange = 14,
            start = new Date(),
            end = new Date(start.getTime());

        end.setDate(end.getDate() + dateRange);
			
		var basePath = queryInfo.find('#drives-cta-path').text();
		var queryPath = basePath + '/drive-results?ed=' + formatBasicDate(end) + '&order=DATE&range=' + range + '&sd='+ formatBasicDate(start) + '&zipSponsor=' + searchZipcode;
		
		if (validZip) {
			error.removeClass('active');
			error.attr('data-context', 'invalid-zip');
			if (e.currentTarget.formTarget === '_blank') {
                setTimeout(function() {window.open(queryPath)}, 100);
            } else {
                setTimeout(function() {window.location = queryPath;}, 100);
			}
		} else {
			error.addClass('active');
			error.attr('data-context', 'invalid-zip-active');
		}
	});

	$('#find-a-drive-cta-zip').keydown(function(e){
        var inputLength = jQuery(this).val().length;

        if((inputLength >= 5) && !(e.keyCode < 48 || e.keeCode > 90)) {
            e.preventDefault();
            return false;
        }
	});
})(jQuery,document);
jQuery(function($) {

	var queryInfo = $('#query-info'),
		enableResults = queryInfo.data('results'),
		viewAllPath,
		searchPath,
		searchZipcode,
		validZip,
		range,
		startDate,
		endDate,
		linkPath,
		error = $('.findadrive').find('.invalid-zip'),
		resultLimit,
		bloodDriveUrl,
		noResults,
		container;

	$(window).on('load', function (e) {
		linkPath = queryInfo.find('#results-path').text();
		range = queryInfo.find('#range').text();
		if (enableResults) {
			$('.blood-drive-results-container').find('.rco-carousel-items').addClass('blood-drives');

			    container = $('.blood-drive-results');
				resultLimit = queryInfo.find('#limit').text();
				bloodDriveUrl = queryInfo.find('#blood-drive-url').text();
				noResults = function () {
					container.empty();
					$('.all-drives-link').removeClass('active');
					$('.drives-loading').removeClass('loading');
					$('.blood-drive-results-box').removeClass('active');
					$('.no-results').addClass('active');

					var driveResultsCarousel = $('.rco-carousel-items.blood-drives'),
						numSlidesShown = $('.rco-carousel-items.blood-drives').data('slides-shown'),
						autoplay,
						autoplaySeconds;

					driveResultsCarousel.each(function () {
						autoplay = $(this).data('automatic');
						autoplaySeconds = $(this).data('seconds') * 1000;
						if (!$(this).hasClass('slick-initialized')) {
							$(this).slick({
								slidesToShow: numSlidesShown,
								slidesToScroll: 1,
								autoplay: autoplay,
								autoplaySpeed: autoplaySeconds,
								infinite: true,
								responsive: [
									{
										breakpoint: 1200,
										settings: {
											slidesToShow: 3,
											slidesToScroll: 1
										}
									},
									{
										breakpoint: 992,
										settings: {
											slidesToShow: 2,
											slidesToScroll: 1
										}
									},
									{
										breakpoint: 768,
										settings: {
											slidesToShow: 1,
											slidesToScroll: 1
										}
									}
								]
							});
						}
					});
				};

			getZip();
			getDates();
			setPaths();

            window.addEventListener('zipCookieChange', function () {
                getZip();
                container.empty();
                $('.all-drives-link').removeClass('active');
                loadResults();
            });

			if (validZip) {
                container.empty();
                loadResults();
			}
		}
	});

	var getZip = function() {
			searchZipcode = $('#find-a-drive-zip').val();
			validZip = /^(?!0{3})\d{5}$/.test(searchZipcode);
		},
		setPaths = function() {
			var allPath = queryInfo.find('#view-all-path').text();
			if (!linkPath.match(/\/$/)) {
				linkPath = linkPath + "/";
			}
			if (!allPath.match(/\/$/)) {
				allPath = allPath + "/";
			}
			searchPath = linkPath + 'drive-results?ed=' + endDate + '&order=DATE&range=' + range + '&sd='+ startDate + '&zipSponsor=' + searchZipcode;
			viewAllPath = allPath + 'drive-results?ed=' + endDate + '&order=DATE&range=' + range + '&sd='+ startDate + '&zipSponsor=' + searchZipcode;
		},
		getDates = function() {
			var dateRange = parseInt(queryInfo.find('#date-range').text());
            var m = new Date();
            var end = new Date(m.getTime());
            end.setDate(end.getDate() + dateRange);
			startDate = formatBasicDate(m);
			endDate = formatBasicDate(end);
		},

		loadResults = function() {
            $('.blood-drive-results-container').addClass('results');
            $('.drives-loading').addClass('loading');
            error.removeClass('active');
            error.attr('data-context', 'invalid-zip');
			function parseResults(data, $item) {
				$('.no-results').removeClass('active');
				$('.drives-loading').removeClass('loading');
				$.each(data, function (idx, elem) {
					var $this = elem,
						months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
						monthNumber = $this.startDate.split('/')[0],
						month = months[monthNumber - 1],
						startDate = $this.startDate,
						day = startDate.split('/')[1],
						time = $this.timeOpen,
						startTime = time.split(' - ')[0],
						endTime = time.split(' - ')[1],
						distance = $this.distance,
						fullAddress = $this.address.fullAddress,
						address1 = $this.address.addressLine1,
						address2 = $this.address.addressLine2,
						city = $this.address.city,
						state = $this.address.state,
						zipCode = $this.address.zipCode,
						directions = $this.address.directions,
						driveName = $this.driveName,
						driveId = $this.driveId,
						rawLink = linkPath + '/donation-time?driveId=' + driveId + '&driveName=' + driveName + '&driveDate=' + startDate + '&siteCity=' + city + '&siteState=' + state + '&siteZipCode=' + zipCode + '&endTime=' + endTime + '&startTime=' + startTime + '&siteLine1=' + address1 + '&siteLine2=' + address2 + '&distance=' + distance,
						encodedLink = encodeURI(rawLink);

					container.append(
						'<div class="col-12 col-md-6">' +
						'<a href="' + encodedLink + '" class="drive-result" data-aa-find-a-drive-list="drive-result">' +
						'<div class="drive-date">' +
						'<h4>' + month + '</h4>' +
						'<h4>' + day + '</h4>' +
						'</div>' +
						'<div class="drive-info">' +
						'<h3 class="drive-result-title class="drive-result" data-aa-find-a-drive-list-title="' + driveName + '">' + driveName + '&nbsp»</h3>' +
						'<address>' + fullAddress + '</address>' +
						'<p class="drive-time">' + time + '</p>' +
						'</div>' +
						'</a>' +
						'</div>'
					);
				});
				$('.all-drives-link').addClass('active');
				$('.blood-drive-results-box').addClass('active');
				$('.all-drives-link').find('a').attr('href', viewAllPath);
			}
				
			var limitsuggestions = queryInfo.find('#limitsuggestions').text();
			
            $.ajax({
                url: bloodDriveUrl + '/drives',
                contentType: "application/json;charset=UTF-8",
                data: JSON.stringify({
                    "endDate": endDate,
                    "limit": resultLimit,
                    "order": "DISTANCE",
                    "range": range,
                    "startDate": startDate,
                    "suggestIfBlank": false,	// Only return results within search parameters
                    "zipCode": searchZipcode
                }),
                dataType: 'json',
                type: 'POST',
                error: function () {
                    noResults();
                },
                success: function (data) {
                    if (data.length > 0) {	// Check for results within search parameters
                        parseResults(data.list, $(this))
                    } 
					else if (limitsuggestions > 0) {	// If no results within search params and suggestions limit is not 0, check for suggested drives 
						$.ajax({
							url: bloodDriveUrl + '/drives',
							contentType: "application/json;charset=UTF-8",
							data: JSON.stringify({
								"endDate": endDate,
								"limit": resultLimit,
								"order": "DISTANCE",
								"range": range,
								"startDate": startDate,
								"suggestIfBlank": true,		// Return results outside of search parameters
								"zipCode": searchZipcode
							}),
							dataType: 'json',
							type: 'POST',
							error: function () {
								noResults();
							},
							success: function (data) {
								if (data.length > 0) {
									parseResults(data.list.slice(0, limitsuggestions), $(this))
								} else {
									noResults();
								}
							}
						});
                    }
					else {	// If no results within search params and no suggestions requested
						noResults();
					}
                }
            });
		};

	$('#find-a-drive').on('click', 'button', function(e) {
		e.preventDefault();
		getZip();
		getDates();
		setPaths();
		if (validZip) {
			error.removeClass('active');
			error.attr('data-context', 'invalid-zip');
			setTimeout(function() {window.location = searchPath;}, 100);
		} else {
			error.addClass('active');
			error.attr('data-context', 'invalid-zip-active');
		}
	});
});
(function($, document) {

    $(document).on('ready', function(){
        var reCheck = Cookies.get('LOCATION_ZIP_RECHECK') === 'true' || Cookies.get('LOCATION_ZIP_RECHECK') === true;
        window.addEventListener('zipCookieChange', function () {
             var zipCookie = Cookies.get('LOCATION_ZIP') || '20006';
             $('#find-a-drive-zip').val(zipCookie);
             $('#ziporsponsor').val(zipCookie);
             $('.zip-or-sponsor-code').val(zipCookie);
        });
        if (!reCheck) {
             var zipCookie = Cookies.get('LOCATION_ZIP') || '20006';
             $('#find-a-drive-zip').val(zipCookie);
             $('#ziporsponsor').val(zipCookie);
             $('.zip-or-sponsor-code').val(zipCookie);
        }
    });

})(jQuery, document);
jQuery(function($) {
	let nowIncrementor = Date.now()

	$('.expandable-content-main').each(function(e) {
		// Create the variables that will refer to the elements in the click event and do a bit of work to create a
		// unique ID for each of the items this will target
		let contentTitlesElement, titleElement, plusMinusElement, contentElement,
			expandableIdBase = [
				'expandable',
				nowIncrementor,
				Math.random().toString().substr(2,10)
			].join('-'),
			contentIdBase = [
				'content',
				nowIncrementor.toString(),
				Math.random().toString().substr(2,10)
			].join('-'),
			contentTitlesId = contentIdBase + '-contentTitles',
			expandableIdTitle = expandableIdBase + '-title',
			expandableIdPlusMinus = expandableIdBase + '-plusminus',
			expandableIdContent = expandableIdBase + '-content';

		// Add IDs and ARIA attributes to the relevant pieces of the expandable-content
		contentTitlesElement = $(this).find('.content-titles')
			.attr('id', contentTitlesId)
			// aria-controls points to the expandable content, letting the screen-reader know that that's what this
			// is going to make changes to. Store pointers to these elements so they can be consistently and
			// reliably targeted in the click event
			.attr('aria-controls', expandableIdContent);
		titleElement = $(this).find('.expandable-title')
			.attr('id', expandableIdTitle)
			.attr('aria-controls', expandableIdContent);
		plusMinusElement = $(this).find('.plus-minus')
			.attr('id', expandableIdPlusMinus)
			.attr('aria-controls', expandableIdContent);
		contentElement = $(this).find('.collapsed-content')
			.attr('id', expandableIdContent)
			.attr('role', 'region')
			.attr('aria-labelledby', expandableIdTitle);

		// Recreate the previous function with a few more toggles for accessibility based on how the clicks worked and
		// how the screen reader targeted the elements.
		contentTitlesElement.on('click', function(e) {
			e.stopPropagation();
			// aria-expanded goes on the button to say if the targeted area is expanded or not
			titleElement.attr('aria-expanded', titleElement.attr('aria-expanded')==='false' ? 'true' : 'false');
			plusMinusElement.toggleClass('open').attr('aria-expanded', plusMinusElement.attr('aria-expanded')==='false' ? 'true' : 'false');
			contentTitlesElement.attr('aria-expanded', contentTitlesElement.attr('aria-expanded')==='false' ? 'true' : 'false');
			contentElement.attr('tabindex')==='-1' ?  contentElement.attr('tabindex', '0') : contentElement.attr('tabindex', '-1');
			$(this).siblings('.collapsed-content').stop(true, false).slideToggle();
			// left this alone because it still works
			var expandableParent = $(this).closest('.expandable-content-main');
			if (expandableParent.find('.image-carousel-items').length) {
				expandableParent.find('.image-carousel-items').slick('setPosition');
			}
			if (expandableParent.find('.rco-carousel-items').length) {
				expandableParent.find('.rco-carousel-items').slick('setPosition');
			}
		});
		// Increment the now value because these operations took place inside of a single millisecond on my machine,
		// making them slightly less than unique...
		nowIncrementor++;
	})
});

(function($, document){

    // set bindings
    function init() {
        var viewAllLinks = $('.view-all');
        $(viewAllLinks).each(function () {
            var link = $(this).attr('href');
            if (link && link != '') {
                var selectors = $(this).closest('.dynamic-page-teaser-content').find('.link-selectors').text();
                var newLink = link.split('.html')[0] + selectors + '.html';
                $(this).attr('href', newLink);
            } else {
                $(this).hide();
            }
        });
    }

    $(document).on('ready', function () {
        init();
    });

})(jQuery, document);
jQuery(function($) {
  var iframes = $('.dynamic-iFrame .iframe-container');
  if (iframes.length) {
    $.getScript("/etc/clientlibs/redcross/vendor/iframe/iframeResizer.min.js", function(){
        iframes.each(function() {
            var $this = $(this);
            var src1 = $this.data('iframeurl');
            var queryParam = getParameterByName('thrive_category');
            var iframe = $this.find('iframe');
            if (queryParam != null) {
                src1 = src1 + "?thrive_category=" + queryParam;
                iframe.prop('src', src1);
            }
            iframe.iFrameResize({heightCalculationMethod:'lowestElement'});
            iframe.removeAttr('height');
            iframe.attr('scrolling','no');
        });
        function getParameterByName(name) {
            var url = window.location.href;
            name = name.replace(/[\[\]]/g, "\\$&");
            var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, " "));
        }
    });
  }
});


(function($, document){


    var targetElement = $('.hero-image').parent('.heroimage').parent('.campaign')[0];
    var config = { attributes: true, childList: true, characterData: true };

    if(targetElement){
        var observer = new MutationObserver(function(mutations) {
            mutations.forEach(function() {
                bindToHero();
                observer.disconnect();
            });
        });
        observer.observe(targetElement, config);
    } else {
        $(document).on('ready', function () {
            bindToHero();
        });
    }

    function bindToHero() {

        // set bindings
        function init() {
            var forms = $('.custom-donation-form');
            $.each(forms, function () {
                var inputField = $(this).find('.custom-donation-amount');
                var customDonation = $(this).find('.custom-donation');
                var submit = $(this).find('.dollar-handles-cta-button button');
                var formAction = $(this).attr('action');
                var handleButtons = $(this).find('.handle');
                initButtons(handleButtons);
                initSubmitButton(submit, formAction);
                initInput(inputField);
            });
        };

        // bind the dollar handle buttons
        function initButtons(handleButtons) {
            $.each(handleButtons, function () {
                $(this).on('click', function () {
                    var form = $(this).closest('.custom-donation-form');
                    var isActive = $(this).hasClass('active');
                    clearActiveButtons(form);
                    clearInput(form);
                    if (!isActive) {
                        $(this).addClass('active');
                        var attrValue = $(this).attr('data-aa-dollar-handle-amount');
                        $(this).attr('data-aa-dollar-handle-amount', attrValue + ' active');
                    }
                });
            });
        }

        // bind the input field
        function initInput(inputField) {

            // check input when it's entered
            $(inputField).on('keypress', function (e) {
                if (allowInput(e)) {
                    var customDonation = e.target.closest('.custom-donation');
                    $(customDonation).addClass('active');
                    return true;
                } else {
                    e.preventDefault();
                    return false;
                }
            });

            // format the input field
            $(inputField).on('keyup', function () {
                var form = $(this).closest('.custom-donation-form');
                clearActiveButtons(form);
                var inputValue = $(this).val();
                checkButtonIfSameValue(form, inputValue);
                var start = this.selectionStart,
                    end = this.selectionEnd;
                var commas = (inputValue.match(/,/g) || []).length;
                var dollars = inputValue.split('.')[0];
                dollars = dollars.replace(/,/g, '');
                // zero edge case
                if (inputValue.indexOf('0') === 0 && inputValue.indexOf('0.') !== 0 && inputValue !== '0') {
                    start -= 1;
                    end -= 1;
                }
                if (inputValue.indexOf('.') === 0) {
                    $(this).val('0' + inputValue);
                    start += 1;
                    end += 1;
                }
                // if they deleted the period, making the length too long, delete the cents
                if (dollars.length > 6) {
                    $(this).val(dollars.substring(0, 6));
                }
                // keep cursor from jumping around if commas are removed
                $(this).formatCurrency({symbol: '', eventOnDecimalsEntered: true, roundToDecimalPlace: -1});
                var commaDiff = ($(this).val().match(/,/g) || []).length - commas;
                start += commaDiff;
                end += commaDiff;

                // restore from variables...
                this.setSelectionRange(start, end);
            });
        }

        // check to see if we should allow this input
        function allowInput(evt) {
            var inputField = evt.target;
            var inputValue = $(inputField).val();
            var charCode = (evt.which) ? evt.which : evt.keyCode;
            var isBackspace = charCode == 8;
            var isDelete = charCode == 46;
            var isLeftArrow = charCode == 37;
            var isUpArrow = charCode == 38;
            var isRightArrow = charCode == 39;
            var isDownArrow = charCode == 40;
            if (isDelete || isBackspace || isLeftArrow || isUpArrow || isRightArrow || isDownArrow || textIsHighlighted(inputField)) {
                return true;
            }
            if (charCode == 13) {
                $(inputField).closest('form').find('.dollar-handles-cta-button input[type=submit]').click();
                return false;
            }
            var isNumber = charCode < 58 && charCode > 47;
            var dollarsAndCents = inputValue.split('.');
            var dollars = dollarsAndCents[0];
            var cents = '';
            if (dollarsAndCents && dollarsAndCents.length > 1) {
                cents = dollarsAndCents[1];
            }
            var isBackspace = charCode == 8;

            var cursorPosition = inputField.selectionStart;
            var decimalPosition = inputValue.indexOf('.');

            if (decimalPosition > -1 && decimalPosition < cursorPosition) {
                //they're entering cents
                if (cents && cents.length == 2) {
                    return false;
                }
            } else {
                //they're entering dollars
                if (dollars.replace(/,/g, '').length == 6) {
                    return false;
                }
            }

            return isNumber;
        }

        var clearActiveButtons = function (form) {
            var element = $(form).find('.handle.active');
            if (element && element.length > 0) {
                $(element).removeClass('active');
                var attrValue = $(element).attr('data-aa-dollar-handle-amount');
                $(element).attr('data-aa-dollar-handle-amount', attrValue.replace(' active', ''));
            }
        };

        var clearInput = function (form) {
            var inputField = $(form).find('.custom-donation-amount');
            var customDonation = $(form).find('.custom-donation');
            customDonation.removeClass('active');
            $(inputField).val("");
        };

        // bind the submit button and add the correct parameters
        function initSubmitButton(submitButton, formAction) {
            $(submitButton).on('click', function (e) {
                e.preventDefault();
                var form = $(e.target).closest('form');
                var donationAmount = $(form).find('.handle.active .handle-text').text();
                if (donationAmount) {
                    donationAmount = donationAmount.replace('$', '');
                }
                var inputField = $(form).find('.custom-donation-amount');
                var customDonationAmount = $(inputField).val();
                var queryAmount = donationAmount || customDonationAmount || '0';
                queryAmount = parseFloat(queryAmount.replace(/,/g, ''));
                var queryParams = '?donamt=' + queryAmount;
                formAction += queryParams;
                window.location.href = formAction;
            });
        }

        function getSelectionText() {
            var text = "";
            if (window.getSelection) {
                text = window.getSelection().toString();
            } else if (document.selection && document.selection.type != "Control") {
                text = document.selection.createRange().text;
            }
            return text;
        }

        function checkButtonIfSameValue(form, inputValue) {
            var dollarHandles = $(form).find('.handle');
            var customAmount = parseFloat(inputValue.replace(/[^0-9\.]+/g, ""));
            $(dollarHandles).each(function () {
                var handleAmount = parseFloat($(this).find('.handle-text').text().replace('$', '').replace(/[^0-9\.]+/g, ""));
                if (customAmount == handleAmount) {
                    $(this).addClass('active');
                }
            });
        }

        function textIsHighlighted(input) {
            var startPos = input.selectionStart;
            var endPos = input.selectionEnd;
            var doc = document.selection;

            if (doc && doc.createRange().text.length != 0) {
                return true;
            } else if (!doc && input.value.substring(startPos, endPos).length != 0) {
                return true;
            }
            return false;
        }

        init();

    }

})(jQuery, document);
(function($, document) {

  function buildGallery(component) {

    var wrapper = $(component);
    var gallery = wrapper.find('.gallery-previews');
    var items = gallery.children();
    var count = items.length;
    var currentInfo = wrapper.find('.current-video-header .current-video-info');
    currentInfo.addClass("hide-for-small");

    var i = 0;
    function getData() { // iterate items asynchronously to get data and build thumbnails
      
      var item = items[i];
      var itemSource = $(item).data("source");
      var itemId = $(item).data("id");
      var itemTitle = $(item).data("title");
      var itemThumbnail = $(item).data("thumb");

      if (itemSource == "vimeo") { // vimeo
        var vimeoApiUrl = "https://vimeo.com/api/v2/video/" + itemId + ".json";
        var vimeoData = {};
        $.getJSON(vimeoApiUrl)
        .done(function(data){
          vimeoData = data;
          itemTitle = itemTitle ? itemTitle : data[0].title;
          $(item).attr("data-title", itemTitle);
          if (!itemThumbnail) {
            itemThumbnail = data[0].thumbnail_medium ? data[0].thumbnail_large : "https://i.ytimg.com/vi/default.jpg";
          }
          var itemHtml = '<div class="gallery-preview-content">';
            itemHtml += '<button class="gallery-preview-image" style="background-image: url(\'' + itemThumbnail + '\');">';
            itemHtml += '<span class="hidden-off-screen">Play video: ' + itemTitle + '</span>';
            itemHtml += '</button><span class="play-button rco-ui-icon-play-icon"></span>';
            itemHtml += '</div>';
          $(itemHtml).appendTo(item);
          if (i == 0) { // set preview to current thumbnail
            var preview = wrapper.find('.current-video-preview');
            var caption = wrapper.find('div.current-video-caption .description');
            preview.css('background-image', 'url(\'' + itemThumbnail + '\')');
            caption.text(itemTitle);
            $(item).find('.gallery-preview-content').addClass('active');
            bindFirstVideo(wrapper, itemSource, itemId);
          }
          i++;
          if (i < count) getData();
        })
        .fail(function(jqxhr, textStatus, error) {
          var err = textStatus + ", " + error;
          console.log("Request Failed: " + err);
        });
      } else {  // youtube
        if (!itemTitle) {
          var url = 'https://www.youtube.com/watch?v=' + itemId;
          $.getJSON('https://noembed.com/embed',
            {format: 'json', url: url}, function (data) {
              $(item).attr("data-title", itemTitle);
          });
        }
        if (!itemThumbnail) {
          itemThumbnail = "https://img.youtube.com/vi/" + itemId + "/0.jpg";
        }
        var itemHtml = '<div class="gallery-preview-content">';
          itemHtml += '<button class="gallery-preview-image" style="background-image: url(\'' + itemThumbnail + '\');">';
          itemHtml += '<span class="hidden-off-screen">Play video: ' + itemTitle + '</span>';
          itemHtml += '</button><span class="play-button fab fa-youtube"></span>';
          itemHtml += '</div>';
        $(itemHtml).appendTo(item);
        if (i == 0) { // set preview to current thumbnail
          var preview = wrapper.find('.current-video-preview');
          var caption = wrapper.find('div.current-video-caption .description');
          preview.css('background-image', 'url(\'' + itemThumbnail + '\')');
          caption.text(itemTitle);
          $(item).find('.gallery-preview-content').addClass('active');
          bindFirstVideo(wrapper, itemSource, itemId);
        }
        i++;
        if (i < count) getData();
      }
    }

    wrapper.find('.gallery-preview-content').first().addClass('active');
    var counter = wrapper.find('.gallery-counter .total-count');
    counter.text(count);

    getData();
    bindGalleryPreviews(wrapper);
  }

  function bindFirstVideo(wrapper, itemSource, itemId) {
    
    wrapper.find('.current-video-header').on('click', function() {

      wrapper.find('.current-video-preview').hide();
      wrapper.find('.current-video-header .play-button').hide();
      wrapper.find('.current-video-header .current-video-info').hide();

      var player = wrapper.find('.current-video-player');
      var iframeHtml = "";
      
      if (itemSource == "youtube")
        iframeHtml = '<iframe src="https://www.youtube.com/embed/' + itemId + '?showinfo=0&autoplay=1&rel=0&enablejsapi=1" frameborder="0" allow=\"autoplay; fullscreen\" allowfullscreen title="Youtube Video"></iframe>';	// Youtube iframe
      else if (itemSource == "vimeo") 
      
        iframeHtml = '<iframe src="https://player.vimeo.com/video/' + itemId + '?autoplay=1" frameborder="0" allow=\"autoplay; fullscreen\" allowfullscreen title="Vimeo Video"></iframe>';	// Vimeo iframe
      
      player.html(iframeHtml);
      player.show();

    });

  }

  function bindGalleryPreviews(wrapper) {
    wrapper.find('.gallery-preview').on('click', function() {
      var _this = $(this);
      var gallery = wrapper.find('.gallery-previews');
      var items = gallery.children();
      var count = items.length;

      wrapper.find('.current-video-preview').hide();

      var videoId = _this.data('id');
      var videoTitle = _this.data('title') ? _this.data('title').replace("â€“","—") : "";
      var itemSource = _this.data("source");
      var itemId = _this.data("item");

      var playButtons = wrapper.find('.current-video-header .play-button');
      playButtons.hide();

      var currentInfo = wrapper.find('.current-video-header .current-video-info');
      currentInfo.hide();

      var caption = wrapper.find('div.current-video-caption .description');
      caption.text(videoTitle);

      var curCounter = wrapper.find('.gallery-counter .current-count');
      var counter = wrapper.find('.gallery-counter .total-count');
      curCounter.text(itemId + 1)
      counter.text(count);

      var player = wrapper.find('.current-video-player');
      var iframeHtml = "";
      if (itemSource == "youtube")
          iframeHtml = '<iframe src="https://www.youtube.com/embed/' + videoId + '?showinfo=0&autoplay=1&rel=0&enablejsapi=1" frameborder="0" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>';	// Youtube iframe
      else if (itemSource == "vimeo") 
      iframeHtml = '<iframe src="https://player.vimeo.com/video/' + videoId + '?autoplay=1" frameborder="0" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>';	// Vimeo iframe
      player.html(iframeHtml);
      player.show();

      if (!player.isOnScreen()) {
        var headerHeight = ($("header.stickynav").length || $("header.rcb-header").length)? $("header").height() + 50 : 50;
        $('html, body').animate({
          scrollTop: player.offset().top - headerHeight
        }, 500);
      }

      wrapper.find('.gallery-preview-content').removeClass('active');
      _this.find('.gallery-preview-content').addClass('active');
    });
  }

  $.fn.isOnScreen = function(){
    var win = $(window);

    var viewport = {
        top : win.scrollTop(),
        left : win.scrollLeft()
    };
    viewport.right = viewport.left + win.width();
    viewport.bottom = viewport.top + win.height();

    var bounds = this.offset();
    bounds.right = bounds.left + this.outerWidth();
    bounds.bottom = bounds.top + this.outerHeight();

    return (!(viewport.right < bounds.left || viewport.left > bounds.right || viewport.bottom < bounds.top || viewport.top > bounds.bottom));
  };

  $(document).on('ready', function() {
    var videoComponents = $('.content-card-video-gallery-main');
    if (videoComponents.length) {
        let link = document.createElement("link");
        link.href = "https://fonts.googleapis.com/css?family=Just+Another+Hand";
        link.setAttribute("rel", "stylesheet");
        document.head.appendChild(link);
    }
    videoComponents.each(function() {
        buildGallery(this);
    })
  });

})(jQuery, document);
(function($, document) {
    function buildGallery(component) {
        var wrapper = $(component);
        var id = getID(wrapper);
        var source = wrapper.data('source');
        var requestUrl;
        var requestBody = {};
        if (id && id.length !== 0) {
            if (source == "vimeo"){
                var galleryParam = (!isSingleVideo(wrapper) ? "&gallery=true" : "");	// If this is a gallery, add gallery parameter to request
                var accountParam = (wrapper.data('playlist-account') ? "&account=" + wrapper.data('playlist-account') : "");	// If a playlist account name is entered, add account parameter to request (default in servlet is AmericanRedCross)
                requestUrl = "/bin/vimeo.json?id=" + id + galleryParam + accountParam;
                requestBody = {
                    url: requestUrl,
                    async: true
                }
            }
            else if (source == "youtube") {
                var requestUrl = buildRequestURL(wrapper) + id + '.json';
                requestBody = {
                    url: requestUrl,
                    async: true,
                    contentType: 'application/json',
                    dataType: 'json'
                }
            }
            if (requestBody != {}) {
                var request = $.ajax(requestBody).done(function (data) {
                    if (data.error) {
                        console.log(source + " error: " + data.error.code + " " + data.error.message);
                        buildFallback(wrapper);
                    }
                    else {
                        processResults(wrapper, data);
                    }
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    if (jqXHR.status == 404) {
                        console.log(source + " video or playlist not found: " + id);
                    }
                    else if (jqXHR.status == 400) {
                        console.log(source + " video ID was entered."); 
                    }
                    else {
                        console.log("Failed to retrieve " + source + " results. Servlet status: " + jqXHR.status + ". Error thrown: " + errorThrown);
                        buildFallback(wrapper);
                    }
                });
            }
        }
    }

    function isSingleVideo(wrapper) {
        var option = wrapper.data('option');
        return 'single' === option;
    }

    function buildRequestURL(wrapper) {
        var requestUrl = '/bin/youtube.part=snippet&maxResults=50&';
        if (isSingleVideo(wrapper)) {
            requestUrl += 'id=';
        } else {
            requestUrl += 'playlistId=';
        }
        return requestUrl;
    }

    function getID(wrapper) {
        var id;

        if (isSingleVideo(wrapper)) {
            id = wrapper.data('id');
        } else {
            id = wrapper.data('playlist-id');
        }
        return id;
    }

    function getVideoTitle(wrapper) {
        var videoTitle = "";
        if (wrapper && "data" in wrapper) { videoTitle = wrapper.data('video-title') || ""; }
        return videoTitle
    }

    function getVideoDesc(wrapper) {
        var videoDesc;
		videoDesc = wrapper.data('video-desc');
        return videoDesc;
    }

    function processResults(wrapper, data) {
        buildSingleVideo(wrapper, data);
        bindSingleVideo(wrapper, data);

        if (!isSingleVideo(wrapper)) {
            buildGalleryPreviews(wrapper, data);
            bindGalleryPreviews(wrapper, data);
        }

        $(window).resize();
        wrapper.removeClass('hidden');
    }

    function buildFallback(wrapper) {
        var id = getID(wrapper);
        var isGallery = !isSingleVideo(wrapper);
        var source = wrapper.data("source");
        
        wrapper.find('.current-video-preview').hide();
        wrapper.find('.current-video-header .play-button').hide();
        wrapper.find('.current-video-caption').hide();
        wrapper.find('.current-video-header p.current-video-title').addClass('hide-for-medium');

        var iframeTitle = getVideoTitle(wrapper);
        if (iframeTitle !== "") {
            iframeTitle += " - ";
        }
        var player = wrapper.find('.current-video-player');
        var iframeHtml = "";
        if (source == "youtube") {
            if (isGallery) {
                iframeHtml = '<iframe src="https://www.youtube.com/embed/videoseries?list=' + id + '" title="' + iframeTitle + 'Youtube Video Playlist Player" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>';	// Youtube iframe for playlist
            }
            else {
                iframeHtml = '<iframe src="https://www.youtube.com/embed/' + id + '?showinfo=0&autoplay=0&rel=0&enablejsapi=1" title="' + iframeTitle + 'Youtube Video Player" allow=\"fullscreen\" frameborder="0" allowfullscreen></iframe>';	// Youtube iframe for single video
            }
        }
        else if (source == "vimeo") {
            if (isGallery) {
                //TODO: Gallery iframe
                iframeHtml = '<iframe style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" src="https://vimeo.com/showcase/' + id + '/embed" title="' + iframeTitle + 'Vimeo Video Playlist Player" frameborder="0" allow=\"fullscreen\" allowfullscreen></iframe>'
            }
            else {
                iframeHtml = '<iframe src="https://player.vimeo.com/video/' + id + '?autoplay=0" title="' + iframeTitle + 'Vimeo Video Player" frameborder="0" allow=\"fullscreen\" allowfullscreen></iframe>';	// Vimeo iframe for single video
            }

        }
        player.html(iframeHtml);
        player.show();
        wrapper.removeClass('hidden');
    }

    function buildSingleVideo(wrapper, data) {
        var id = getID(wrapper);
        var videoTitle = getVideoTitle(wrapper);
        var videoDesc = getVideoDesc(wrapper);
        var preview = wrapper.find('.current-video-preview');
        var customImage = preview.data('image-src');
        var source = wrapper.data("source");

        if (isSingleVideo(wrapper) && customImage) {
            preview.css('background-image', 'url("'+ customImage + '")');
        } else {
            if (source == "vimeo" && isSingleVideo(wrapper)) {	// Single vimeo video does not return an items array
                var thumbnail = getThumbnail(data, true);
            }
            else {
                var thumbnail = getThumbnail(data.items[0], source == "vimeo");
            }
            preview.css('background-image', 'url("' + thumbnail + '")');
        }

        preview.data('id', id);

        var caption = wrapper.find('div.current-video-caption .description');
        if (isSingleVideo(wrapper)) {
        	var videoData = (source == 'vimeo' ? data : data.items[0].snippet); // Gets appropriate json structure (vimeo vs youtube)
            var description = videoDesc ? videoDesc : videoData.description;
            if (description != null)
                caption.html(description.replace(/\n/g, "<br />").replace("â€“","—"));
        } 
		else if (source == "vimeo"){
        	var videoData = data.items[0]; // Video data is vimeo item
            caption.text(videoData.name.replace("â€“","—"));
        }
        else {
            var videoData = data.items[0].snippet; // Video data is youtube itemgit
            caption.text(videoData.title);
        }

        var title = wrapper.find('p.current-video-title');
        if (!videoTitle)
            videoTitle = (videoData.name ? videoData.name.replace("â€“","—") : videoData.title)
        title.text(videoTitle);
    }

    function bindSingleVideo(wrapper, data) {
        wrapper.find('.current-video-header').on('click', function() {
            var _this = $(this);
            var parent = _this.closest('.content-card-video-main');
            parent.find('.current-video-preview').hide();

            var currentId = parent.data('id');
            var source = wrapper.data("source");
            if (!isSingleVideo(wrapper) && data != null) {
				if (source == "vimeo")
					currentId = data.items[0].uri.replace("/videos/","");
				else if (source == "youtube")
					currentId = data.items[0].snippet.resourceId.videoId;
            }

            var playButtons = parent.find('.current-video-header .play-button');
            playButtons.hide();

            var currentTitle = parent.find('.current-video-header p.current-video-title');
            currentTitle.addClass('hide-for-medium');

            var iFrameTitle = currentTitle.text() !== "" ? currentTitle.text() + " - " : ""

            var player = parent.find('.current-video-player');
            var iframeHtml = "";
            if (source == "youtube")
                iframeHtml = '<iframe src="https://www.youtube.com/embed/' + currentId + '?showinfo=0&autoplay=1&rel=0&enablejsapi=1" allow=\"autoplay; fullscreen\" frameborder="0" allowfullscreen title="' + iFrameTitle + 'Youtube Video Player"></iframe>';	// Youtube iframe
            else if (source == "vimeo")
                iframeHtml = '<iframe src="https://player.vimeo.com/video/' + currentId + '?autoplay=1" frameborder="0" allow=\"autoplay; fullscreen\" allowfullscreen title="' + iFrameTitle + 'Vimeo Video Player"></iframe>';	// Vimeo iframe
            player.html(iframeHtml);
            player.show();
        });
    }

    function buildGalleryPreviews(wrapper, data) {
        var gallery = wrapper.find('.video-gallery');
        var limit = gallery.data('limit');
        var count = data.items.length;
        gallery = gallery.find('.row');
        var source = wrapper.data("source");

        var currentInfo = wrapper.find('.current-video-header .current-video-info');
        currentInfo.addClass("hide-for-small");

        if (source == "youtube") {
            for (var i = 0; i < limit; i++) {
                if (i < data.items.length) {
                    var item = data.items[i];
                    var thumbnail = getThumbnail(item,false);
                    var galleryHtml = '<div class="gallery-preview col-sm-6 col-md-4 col-lg-3" data-id="' + item.snippet.resourceId.videoId + '" data-title="' + item.snippet.title + '" data-item="' + (i + 1) + '">';
                    galleryHtml += '<div class="gallery-preview-content">';
                    galleryHtml += '<button class="gallery-preview-image" style="background-image: url(' + thumbnail + ');">';
                    galleryHtml += '<span class="hidden-off-screen">Play video: ' + item.snippet.title + '</span>';
                    galleryHtml += '</button><span class="play-button fab fa-youtube"></span>';
                    galleryHtml += '</div></div>';
                    $(galleryHtml).appendTo(gallery);
                }
            }
        }
        else if (source == "vimeo") {
            for (var i = 0; i < limit; i++) {
                if (i < data.items.length) {
                    var item = data.items[i];
                    var thumbnail = getThumbnail(item,true);
                    var galleryHtml = '<div class="gallery-preview col-sm-6 col-md-4 col-lg-3" data-id="' + item.uri.replace("/videos/","") + '" data-title="' + item.name + '" data-item="' + (i + 1) + '">';
                    galleryHtml += '<div class="gallery-preview-content">';
                    galleryHtml += '<button class="gallery-preview-image" style="background-image: url(' + thumbnail + ');">';
                    galleryHtml += '<span class="hidden-off-screen">Play video: ' + item.name + '</span>';
                    galleryHtml += '</button><span class="play-button rco-ui-icon-play-icon"></span>';
                    galleryHtml += '</div></div>';
                    $(galleryHtml).appendTo(gallery);
                }
            }
        }

        wrapper.find('.gallery-preview-content').first().addClass('active');
        var counter = wrapper.find('.counter');
        counter.text("1 of " + Math.min(limit, count));
    }

    function bindGalleryPreviews(wrapper, data) {
       wrapper.find('.gallery-preview').on('click', function() {
           var _this = $(this);
           var gallery = wrapper.find('.video-gallery');
           var limit = gallery.data('limit');
           var count = data.items.length;

           var parent = _this.closest('.content-card-video-main');
           parent.find('.current-video-preview').hide();

           var videoId = _this.data('id');
           var videoTitle = _this.data('title').replace("â€“","—");
           //var videoDescription = _this.data('description');
           var itemId = _this.data('item');

           var iframeTitle = videoTitle !== "" ? videoTitle += " - " : "";

           var playButtons = parent.find('.current-video-header .play-button');
           playButtons.hide();

           var currentInfo = wrapper.find('.current-video-header .current-video-info');
           currentInfo.hide();

           var caption = parent.find('div.current-video-caption .description');
           caption.text(videoTitle);

           var counter = $('.counter');
           counter.text(itemId + ' of ' + Math.min(limit, count));

           var player = parent.find('.current-video-player');
           var iframeHtml = "";
           if (wrapper.data('source') == "youtube")
               iframeHtml = '<iframe src="https://www.youtube.com/embed/' + videoId + '?showinfo=0&autoplay=1&rel=0&enablejsapi=1" frameborder="0" allow=\"autoplay; fullscreen\" allowfullscreen title="' + iframeTitle + 'Youtube Video Playlist"></iframe>';	// Youtube iframe
           else if (wrapper.data('source') == "vimeo")
               iframeHtml = '<iframe src="https://player.vimeo.com/video/' + videoId + '?autoplay=1" frameborder="0" allow=\"autoplay; fullscreen\" allowfullscreen  title="' + iframeTitle + 'Vimeo Video Playlist"></iframe>';	// Vimeo iframe
           player.html(iframeHtml);
           player.show();

           if (!player.isOnScreen()) {
            var headerHeight = ($("header.stickynav") || $("header.rcb-header"))? $("header").height() + 50 : 50;
            $('html, body').animate({
              scrollTop: player.offset().top - headerHeight
            }, 500);
          }

           parent.find('.gallery-preview-content').removeClass('active');
           _this.find('.gallery-preview-content').addClass('active');
       });
    }

    function getThumbnail(item, isVimeo) {
        var thumbnail = "https://i.ytimg.com/vi/default.jpg";
        if (isVimeo) {
            thumbnail = item.pictures.sizes[3].link;	// 640w x 360h
        }
        else {
            var thumbnails = item.snippet.thumbnails;
            if (thumbnails != undefined) {
                if (thumbnails.maxres != null) {
                    thumbnail = thumbnails.maxres.url;
                } else if (thumbnails.standard != null) {
                    thumbnail = thumbnails.standard.url;
                } else if (thumbnails.high != null) {
                    thumbnail = thumbnails.high.url;
                } else if (thumbnails.medium != null) {
                    thumbnail = thumbnails.medium.url;
                } else if (thumbnails["default"] != null) {
                    thumbnail = thumbnails.default.url;
                }
            }
        }
        return thumbnail;
    }

    $.fn.isOnScreen = function(){
        var win = $(window);

        var viewport = {
            top : win.scrollTop(),
            left : win.scrollLeft()
        };
        viewport.right = viewport.left + win.width();
        viewport.bottom = viewport.top + win.height();

        var bounds = this.offset();
        bounds.right = bounds.left + this.outerWidth();
        bounds.bottom = bounds.top + this.outerHeight();

        return (!(viewport.right < bounds.left || viewport.left > bounds.right || viewport.bottom < bounds.top || viewport.top > bounds.bottom));
    };

    $(document).on('ready', function() {
        var videoComponents = $('.content-card-video-main');
        if (videoComponents.length) {
            let link = document.createElement("link");
            link.href = "https://fonts.googleapis.com/css?family=Just+Another+Hand";
            link.setAttribute("rel", "stylesheet");
            document.head.appendChild(link);
        }
        videoComponents.each(function() {
            buildGallery(this);
        })
    });
})(jQuery, document);
(function($, document) {
    var isChrome = navigator.userAgent.indexOf('Chrome') > -1;
    var isSafari = navigator.userAgent.indexOf('Safari') > -1;
    if(isSafari && !isChrome) {
        $('.image-wrapper').addClass('is-safari');
    }
})(jQuery, document);
(function ($, document) {
    var isChrome = navigator.userAgent.indexOf('Chrome') > -1;
    var isSafari = navigator.userAgent.indexOf('Safari') > -1;
    if (isSafari && !isChrome) {
        $('.image-wrapper').addClass('is-safari');
    }

    if (!window.dynamicCardListenerAdded) {
        document.getElement
    }

    // bind touchstart so we can detect if mobile and then ignore mouseenter events on mobile
    var isMobile = false
    $(".content-card-main.dynamic-card.hover, .content-card-main.dynamic-card.both").on('touchstart', function (e) {
        isMobile = true;
    });

    // bind transition on click
    $(".content-card-main.dynamic-card").on("click", transitionDynamicCardClick, function (e) {
        // always execute on mobile click, but on desktop only if the card has the class "click" or "both"
        $(".content-card-main.dynamic-card.do-transition").not($(e.target).parents(".dynamic-card")).removeClass("do-transition");
        if (isMobile || e.currentTarget.classList.contains("click") || e.currentTarget.classList.contains("both")) {
            transitionDynamicCardClick(e);
        }
    });

    // only bind transition function to hover if the hover class is on the card.
    $(".content-card-main.dynamic-card.hover, .content-card-main.dynamic-card.both").on("mouseenter mouseleave", function (e) {
        if (!isMobile) {
            transitionDynamicCardClick(e);
        }
    });

    $(document).on("click", function (e) {
        const clickedCard = $(e.target).parents(".dynamic-card")
        if (clickedCard.length == 0) {
            const flippedCards = $(".content-card-main.dynamic-card.do-transition");

            if (flippedCards) {
                flippedCards.removeClass("do-transition");
            }
        }
    });

    function transitionDynamicCardClick(e) {
        // don't transition if the click was on a link (or the child of a link)
        if (e.type === 'mouseenter' || e.target.nodeName.toLowerCase() != 'a' && !$(e.target).parents("a").length) {
            e.currentTarget.classList.toggle("do-transition"); // adding do-transition class triggers the animation
        }
    }

    $(document).ready(function () {
        $(".dynamic-card").parents(".section-par").addClass("has-dynamic-card")
    })

})(jQuery, document);
jQuery(function ($) {
    var linkButton = $('.class-search-button').find("a");
    if (linkButton) {
        var value = linkButton.attr("data-aa-link-button");
        linkButton.attr("data-aa-link-button", "class-search-cta-panel " + value);
    }

    var visibleClass = $('.class-search-button-wrapper');
    var panelClass = jQuery(visibleClass).closest('.class-search-cta-panel');
    panelClass.attr("data-context", "class-search-cta-panel");
});
(function($, document) {

    var classSearchButtons = $('.class-search-button');
    if (classSearchButtons && classSearchButtons.length > 0) {
        $(classSearchButtons).each(function() {
            if($(this).closest('.hero-image').parent('.heroimage').parent('.campaign')[0]) {
                var config = { attributes: true, childList: true, characterData: true };
                var observer = new MutationObserver(function(mutations) {
                    mutations.forEach(function() {
                        bindButton($(this));
                        observer.disconnect();
                    });
                });
                observer.observe(targetElement, config);
            } else {
                bindButton($(this));
            }
        });
    }

    function bindButton(buttonWrapper) {
        $(buttonWrapper).on('click', 'button', function (e) {
            e.preventDefault();
            var wrapper = jQuery(this).closest('.class-search-button-wrapper');
            var form = wrapper.find('form');
            var error = wrapper.find('.invalid-zip');
            var classError = wrapper.find('.invalid-class');
            var zipCode = form.find('input[name="zip"]').val();
            var validZip = /^\d{5}$/.test(zipCode);
            var validClass = form.find('.select-class').val().length > 0;

            if (validZip && validClass) {
                error.removeClass('active');
                classError.removeClass('active');
                form.submit();
            } else if (validZip === false && validClass) {
                classError.removeClass('active');
                error.addClass('active');
                error.attr('data-context','invalid zip active');
            } else if (validClass === false && validZip) {
                error.removeClass('active');
                classError.addClass('active');
                classError.attr('data-context', 'invalid class active');
            } else {
                error.addClass('active');
                error.attr('data-context', 'invalid zip active');
                classError.addClass('active');
                classError.attr('data-context', 'invalid class active');
            }
        });
    }

    $(document).on('ready', function() {
        var classSearchButtons = $('.class-search-button');
        if (classSearchButtons && classSearchButtons.length > 0) {

            var reCheck = Cookies.get('LOCATION_ZIP_RECHECK') === 'true' || Cookies.get('LOCATION_ZIP_RECHECK') === true;
            window.addEventListener('zipCookieChange', function () {
                var zipCookie = Cookies.get('LOCATION_ZIP') || '20006';
                $(classSearchButtons).each(function(){
                    var wrapper = $(this).closest('.class-search-button-wrapper');
                    $(wrapper).find('.header-geo-field .geo-location').val(zipCookie);
                });
            });
            if (!reCheck) {
                var zipCookie = Cookies.get('LOCATION_ZIP') || '20006';
                $(classSearchButtons).each(function(){
                    var wrapper = $(this).closest('.class-search-button-wrapper');
                    $(wrapper).find('.header-geo-field .geo-location').val(zipCookie);
                });
            }
        }
    });
})(jQuery, document);
jQuery(function($) {
	
	$('.blood-drive-results-container').find('.rco-carousel-items').addClass('blood-drives');
    var targetElement = $('.rco-carousel-main').parent('.rco-carousel').parent('.campaign')[0];
    var config = { attributes: true, childList: true, characterData: true };

    if(targetElement){
        var observer = new MutationObserver(function(mutations) {
            mutations.forEach(function() {
                bindCarousel();
                observer.disconnect();
            });
        });
        observer.observe(targetElement, config);
    } else {
        bindCarousel();
    }

    function bindCarousel() {
        var carousel = $('.rco-carousel-items').not('.blood-drives'),
            autoplay,
            numSlidesShown,
            autoplaySeconds;

        carousel.each(function () {
            autoplay = $(this).data('automatic');
            autoplaySeconds = $(this).data('seconds') * 1000;
            numSlidesShown = $(this).data('slides-shown');

            // Calculate number of slides to show at each breakpoint
            const slidesToShow1200 = numSlidesShown;
            const slidesToShow992 = numSlidesShown;
            const slidesToShow768 = 1;

            $(this).slick({
                slidesToShow: numSlidesShown,
                slidesToScroll: 1,
                autoplay: autoplay,
                autoplaySpeed: autoplaySeconds,
                infinite: true,
                responsive: [
                    {
                        breakpoint: 1200,
                        settings: {
                            slidesToShow: slidesToShow1200,
                            slidesToScroll: 1
                        }
                    },
                    {
                        breakpoint: 992,
                        settings: {
                            slidesToShow: slidesToShow992,
                            slidesToScroll: 1
                        }
                    },
                    {
                        breakpoint: 768,
                        settings: {
                            slidesToShow: slidesToShow768,
                            slidesToScroll: 1
                        }
                    }
                ]
            });
        });
    }

});

jQuery(function($) {
    //AEM-4131 adding prefix based on component to data attribute
	var button = $('[data-aa-link-button]');
	button.each(function() {
        var $this = $(this);
        var original = $this.attr('data-aa-link-button');
        if ($this.closest('.content-card-with-zip').length) {
            $this.attr('data-aa-link-button', 'content-card-with-zip ' + original);
        } else if ($this.closest('.alternate-cta-panel').length) {
            $this.attr('data-aa-link-button', 'alternate-cta-panel ' + original);
        } else if ($this.closest('.event-promo-info').length) {
            $this.attr('data-aa-link-button', 'event-promo-info ' + original);
        } else if ($this.closest('.drive-search').length) {
            $this.attr('data-aa-link-button', 'drive-search ' + original);
        } else if ($this.closest('.forms-certificate-button').length) {
            $this.attr('data-aa-link-button', 'forms-and-certificates ' + original);
        } else if ($this.closest('.generic-panel-button').length) {
            $this.attr('data-aa-link-button', 'generic-cta-panel ' + original);
        } else if ($this.closest('.icon-link-button').length) {
            $this.attr('data-aa-link-button','icon-card ' + original);
            $this.parents('.container-flex').eq(0).find(".icon-link a").attr('data-aa-link-button','icon-card ' + original).append('<span class="hidden-off-screen">' + $this.text() + '</span>');
        } else if ($this.closest('.tribute-submit').length) {
            $this.attr('data-aa-link-button','send-card ' + original);
        } else if ($this.closest('.location-info-text').length) {
            $this.attr('data-aa-link-button','location-map ' + original);
        }
    });


      $(document).click('.redcross-button a', function(event) {
          var link = $(this).attr('href');
          var newtab = $(this).attr('target');
          if(link !== undefined && link.indexOf('postal_code=ZIPCODE') != -1) {
            event.preventDefault();
            var zipCookie = Cookies.get('LOCATION_ZIP') || '20006';
            var new_href = link.replace('ZIPCODE',zipCookie);
            if(newtab!==undefined&&newtab==="_blank")
             window.open(new_href, '_blank');
            else   
            window.location.href = new_href;
          }
      });
});


jQuery(function($) {    
    /* Blog Feed - blocks */
    $('.description-container').each(function() {
        var temp = $(this).children().last();
        $(this).children().slice(3).remove();
        var elementToTrim = $(this).children().last().text();

        if ($(this).children().last().text().length > 300) {
            $(this).children().last().text(elementToTrim.trim(elementToTrim).substring(0, 300).trim(this) + "...")
        }

        $(this).append(temp);
        $(this).show();
    });   

    /* Blog Feed - list */
    $('.blog-feed-container .blog-description').each(function() {
        if ($(this).children()) {                   // Check if description has child elements (ex. many paragraphs)
            $(this).children().slice(1).remove();   // Remove all except first
        }
        var text = $(this)[0].innerText;
        if (text.length > 300) {    // Cut length if over 300 characters
            var shortened = text.substring(0, 300);
            if (shortened[shortened.length-1] == ' ') { // Check if shortened description ends with a space
                shortened = shortened.substring(0,shortened.length-1);  // Remove trailing space
            }
            $(this)[0].innerText = shortened + "...";
        }
    });
});


(function($){
    var button = $('#back-to-top-button');
    if (button && button.length == 1) {
        var mobileWidth = 768;
        var leftMargin = -$(button).outerWidth()/2;
        var isEditMode = false;
        if ($('.back-to-top-button-container.edit-mode').length > 0) {
            isEditMode = true;
        }

        // Initialize button state
        if(!isEditMode) {
            $(button).css('margin-left', leftMargin+'px');
            setOffset(button);
            showHideButton($(window), button, isEditMode);
        }

        // Update on scroll
        $(window).scroll(function() {
            setOffset(button);
            showHideButton($(this), button, isEditMode);
        });

        // Animate the scroll to top
        $('.back-to-top').click(function(event) {
            event.preventDefault();
            $('html, body').animate({scrollTop: 0}, 300);
        })

        function setOffset(button) {
            if(!isEditMode){
                if($(document).scrollTop() + window.innerHeight > $('footer').offset().top) {
                    $(button).removeClass('mobile-sticky');
                } else {
                    $(button).addClass('mobile-sticky');
                }
            }
        }

        function showHideButton(window, button, isEditMode) {
            if ($(window).scrollTop() > 200) {
                $(button).stop(false, true).fadeIn(200).css('display', 'inline-block');
            } else {
                if(!isEditMode){
                    $(button).stop(false, true).fadeOut(200);
                }
            }

        }
    }

})(jQuery);
jQuery(function($) {    
});

jQuery(function($) {
	if ( $('.articlehub').length > 0 ) {
		var $pageNumber = 1,
			$fullUrl = window.location.href,
			$container = $('.articles-container'),
			$url = $fullUrl.split('.html')[0],
			$data,
			$tags = '',
			$filtersArray = [],
			$readableFiltersArray = [],
			$filtersString = '',
			$tagsArray = [],
			$newPage,
			$currentHeight,
			$numPages = 1,
			$pageTitle = $('.articles-title').find('p'),
			$editMode = $container.hasClass('edit'),
			$type = 'article',
			$pagination = $('.article-pagination'),
			$nextButton = $pagination.find('.next'),
			$prevButton = $pagination.find('.prev'),
			getFilterTags = function() {
				$.ajax({
					url: '/bin/filter-tags.json',
					type: 'GET'
				}).done(function(data) {
					if (data.activity && data.activity.length) {
						populateActivityTags(data.activity);
					} else {
						$('.activity-filter').remove();
					}
					
					if (data.service && data.service.length) {
						populateServiceTags(data.service);
					} else {
						$('.service-filter').remove();
					}
				}).fail(function() {
					$('.activity-filter').remove();
					$('.service-filter').remove();
				});
			},
			populateActivityTags = function(filters) {
				var obj = '';
				$.each(filters, function(idx, value) {
					var valueURI = encodeURIComponent(value.name),
						name = value.name;
					obj += '<div class="filter-item">\n' +
						'<input type="checkbox" name="activityFilters" id="activity_' + name + '" value="activity:' + valueURI + '" data-filter-name="' + value.title + '">\n' +
						'<label for="activity_' + name + '">' + value.title + '</label>\n' +
						'</div>';
				});
				$('.activity-list').html(obj);
				getFilters();
			},
			populateServiceTags = function(filters) {
				var obj = '';
				$.each(filters, function(idx, value) {
					var valueURI = encodeURIComponent(value.name),
						name = value.name;
					obj += '<div class="filter-item">\n' +
						'<input type="checkbox" name="serviceFilters" id="service_' + name + '" value="service:' + valueURI + '" data-filter-name="' + value.title + '">\n' +
						'<label for="service_' + name + '">' + value.title + '</label>\n' +
						'</div>';
				});
				$('.service-list').html(obj);
				getFilters();
			},
			getSearchUrl = function(e) {
				$readableFiltersArray = [];
				
				if ( $fullUrl.indexOf('.type=') > -1 ) {
					$type = $fullUrl.split('.type=')[1].match(/[^&?.]*/);
					
					if ($fullUrl.indexOf('.p=') > -1 ) {
						$pageNumber = window.location.href.split('.p=')[1].match(/^\d*/);
					} else {
						$pageNumber = 1;
						$fullUrl = $fullUrl.replace(/.type=[^&?.]*/, '.type=' + $type + '.p=1');
						window.history.pushState(null, '', $fullUrl);
					}
					if ($pageNumber < 1) {
						$newPage = 1;
						$fullUrl = window.location.href.replace('.p='+$pageNumber, '.p='+$newPage);
						window.history.pushState(null, '', $fullUrl);
						$pageNumber = 1;
					}
				} else if ( $editMode === false ) {
					var hash = '',
						filters = '',
						tags = '',
						baseUrl = $fullUrl.split('.html')[0];
					if ($fullUrl.indexOf('?') > -1){
						hash = '?' + $fullUrl.split('?')[1];
					}
					if ($fullUrl.indexOf('f=') > -1){
						filters = '.f=' + $fullUrl.split('.f=')[1].match(/.+?(?=.t=)|[^?&.]*/);
					}
					if ($fullUrl.indexOf('&&t=') > -1){
						tags = '.t=' + $fullUrl.split('.t=')[1].match(/[^?&.]*/);
					}
					if ($fullUrl.indexOf('&&p=') < 0) {
						if ($pageNumber < 1) {
							$newPage = 1;
							$fullUrl = baseUrl + '.type=' + $type + '.p=' + $newPage + filters + tags + '.html' + hash;
							$pageNumber = 1;
						} else {
							$fullUrl = baseUrl + '.type=' + $type + '.p=' + $pageNumber + filters + tags + '.html' + hash;
						}
					}
					window.history.pushState(null, '', $fullUrl);
				} else { // This only runs in wcmmode edit/design/preview
					$fullUrl = window.location.href.replace('.html/', '.html');
					$fullUrl = $fullUrl.replace('.html', '.type.' + $type + '.p=1' + '.html');
				}
				$url = $fullUrl.replace('.type', '.search.type');
				//RCOENT-1110 possible fix in the future as the the above code is working in production
				//$url = $fullUrl.replace('.type', '/jcr:content.search.type');
				setTypeCheck();
				runAjax($url);
			},
			runAjax = function($url) {
				$.ajax({
					url: $url,
					type: 'GET'
				}).done(function(data) {
					$data = data;
					if (data.hits && data.hits.length > 0) {
						$currentHeight = $container.outerHeight();
						$container.css('min-height', $currentHeight);
						$container.empty();
						$numPages = parseInt(data.pages);
						setPageTitle(true);
					} else {
						$container.empty();
						$numPages = parseInt(data.pages);
						if ($numPages > 0) {
							checkPageLimit();
						} else {
							setPageTitle(false);
						}
					}
				}).always(function() {
					$container.removeAttr('style');
					$('html, body').animate({scrollTop: "0"}, 200);
					$('.page-numbers').empty();
					buildPag($numPages, $pageNumber);
					
					// Show current page number
					$('.page').removeClass('active');
					$('.page[data-page=' + $pageNumber + ']').addClass('active');
					
					// Bind pagination
					$pagination.find('.page-numbers').find('.page').on('click', 'a', function(e) {
						var $this = $(this);
						e.preventDefault();
						if (!$this.parent().hasClass('active')) {
							$newPage = $this.parent().data('page');
							$fullUrl = window.location.href.replace('.p='+$pageNumber, '.p='+$newPage);
							window.history.pushState(null, '', $fullUrl);
							getSearchUrl();
						}
					});
					
					// Enable/Disable Pagination Arrows
					if ($numPages != 0) {
						if ($pageNumber == 1) {
							$prevButton.addClass('disabled');
							if ($pageNumber != $numPages) {
								$nextButton.removeClass('disabled');
							} else if ($numPages == 1) {
								$nextButton.addClass('disabled');
								$prevButton.addClass('disabled');
							}
						} else if ($pageNumber == $numPages) {
							$prevButton.removeClass('disabled');
							$nextButton.addClass('disabled');
						} else {
							$prevButton.removeClass('disabled');
							$nextButton.removeClass('disabled');
						}
					} else {
						$nextButton.addClass('disabled');
						$prevButton.addClass('disabled');
					}
					populateResults();
				}).fail(function() {
					noResults();
				}); // End Ajax call
			},
		
			setTypeCheck = function() {
				var typeId = $('#' + $type.toString() + 'Check');
				$(typeId).prop('checked', true);
			},
			getTags = function() {
				var splitUrlTags = $fullUrl.split('.t=');
				$.each(splitUrlTags, function(idx, value) {
					if (idx !== 0) {
						if (value.indexOf(':') > -1) {
							$tagsArray.push(toTitleCase(value.split(':')[1].match(/[^&?.]*/)[0]).replace(/-/g, ' ').replace(/%20/g,' ').replace(/\+/g,' '));
						} else {
							$tagsArray.push(toTitleCase(value.match(/[^&?.]*/)[0]).replace(/%20/g,' ').replace(/\+/g,' '));
						}
					}
				});
			},
			getFilters = function(callback) {
				$filtersArray = [];
				var splitFilters = $fullUrl.split('.f=');
				$.each(splitFilters, function(idx, value) {
					if (idx !== 0) {
						if (value.indexOf(':') > -1) {
							$filtersArray.push(value.split(':')[0] + '_' + value.split(':')[1].match(/[^&?.]*/)[0]);
						} else {
							$filtersArray.push(value.match(/[^&?.]*/)[0]);
						}
					}
				});
				setFiltersChecks();
				if (callback) {
					callback();
				}
			},
			setFiltersChecks = function() {
				$.each($filtersArray, function(idx, value) {
					var taggedId = $('#' + value);
					taggedId.prop('checked', true);
				});
			},
			setPageTitle = function(results) {
				$tags = '';
				$filtersString = '';
				var title="",
					type;
				switch($type.toString()) {
					case 'article':
						type = "Articles";
						break;
					case 'pressRelease':
						type = "Press Releases";
						break;
					case 'event':
						type = "Events";
						break;
					case 'promo':
						type = "Promotions";
						break;
					case 'eventPromo':
						type = "Events & Promotions";
						break;
					default:
						type = "Results";
				}
				if (results === false) {
					title = 'No ';
				}
				title += type;
				let tagTitles = $data["tag-titles"];
				if ($data && $data.hits && $data.hits.length > 0 && tagTitles === "") {
					title = 'All ' + type;
				}
				else if (tagTitles != null && tagTitles != "") {
					title += ' tagged with: "' + tagTitles.replace(/\-/," ") + '"';
				}
				$pageTitle.text(title);
			},
			
			// If page number is too high go back to last page
			checkPageLimit = function() {
				if ($pageNumber > $numPages) {
					$fullUrl = window.location.href.replace('.p='+$pageNumber, '.p='+$numPages);
					window.history.pushState(null, '', $fullUrl);
					$pageNumber = $numPages;
					getSearchUrl();
				} else {
					noResults();
				}
			},
		
			// If no results
			noResults = function() {
				setPageTitle(false);
			},
		
			// Build Pagination
			buildPag = function (numPages, pageNumber) {
				var firstPage = parseInt(pageNumber) - 2,
					lastPage = parseInt(pageNumber) + 2;
				if (numPages < 5) {
					lastPage = numPages;
					firstPage = 1;
				}
				if (firstPage < 1) {
					firstPage = 1;
					if (numPages > 5) {
						lastPage = firstPage + 4;
					}
				}
				if (lastPage >= numPages) {
					lastPage = numPages;
					if (numPages > 5) {
						firstPage = lastPage - 4;
					}
				}
				for (var i = firstPage ; i < parseInt(lastPage) + 1 ; i++){
					$('.page-numbers').append('<div class="page" data-page="' + i + '"><a>' + i + '</a></div>');
				}
			},
			clearFilters = function($this) {
				$this.parent().siblings('.filter-list').find('input:checked').prop('checked', false);
			},
			getNewFilters = function() {
				var checked = [],
					filterString = '';
				$filtersArray = [];
				$('.filter-list').find('input:checked').each(function() {
					checked.push($(this).attr('value'));
				});
				$.each(checked, function(idx, value) {
					filterString += '.f=' + value;
				});
				replaceFilters(filterString);
			},
			replaceFilters = function(newFilters) {
				var hash = '',
					tags = '';
				if ($fullUrl.indexOf('.f=') > -1) {
					if ($fullUrl.indexOf('.t=') > -1) {
						var splitTags1 = $fullUrl.split('.t='),
							urlTagsArray1 = [];
						$.each(splitTags1, function(idx, value) {
							if (idx !== 0) {
								if (value.indexOf(':') > -1) {
									urlTagsArray1.push(value.match(/[^&?.]*/)[0]);
								} else {
									urlTagsArray1.push(value.match(/[^&?.]*/)[0]);
								}
							}
						});
						tags = '.t=' + urlTagsArray1.join('.t=');
					}
					if ($fullUrl.indexOf('?') > -1) {
						hash = '?' + $fullUrl.split('?')[1];
					}
					var urlBase1 = $fullUrl.split('.f=')[0];
					$fullUrl = urlBase1 + newFilters + tags + '.html' + hash;
					window.history.pushState(null, '', $fullUrl);
					getFilters(getSearchUrl());
					//getSearchUrl();
				} else {
					if ($fullUrl.indexOf('.t=') > -1) {
						var splitTags2 = $fullUrl.split('.t='),
							urlTagsArray2 = [];
						$.each(splitTags2, function(idx, value) {
							if (idx !== 0) {
								if (value.indexOf(':') > -1) {
									urlTagsArray2.push(value.match(/[^&?.]*/)[0]);
								} else {
									urlTagsArray2.push(value.match(/[^&?.]*/)[0]);
								}
							}
						});
						tags = '.t=' + urlTagsArray2.join('.t=');
					}
					if ($fullUrl.indexOf('?') > -1) {
						hash = '?' + $fullUrl.split('?')[1];
					}
					var urlBase2 = $fullUrl.split('.p=')[0];
					$fullUrl = urlBase2 + '.p=1' + newFilters + tags + '.html' + hash;
					window.history.pushState(null, '', $fullUrl);
					getFilters(getSearchUrl());
					// getSearchUrl();
				}
				$('.filter-display-box').removeClass('active');
			},
			getNewType = function() {
				var checked = $('.type-list').find('input:checked').attr('value'),
					typeString = '.type=' + checked;
				if ($fullUrl.indexOf('.type=') > -1) {
					$fullUrl = $fullUrl.replace(/.type=[^&.]*/, typeString);
					window.history.pushState(null, '', $fullUrl);
					$('.filter-display-box').removeClass('active');
					getSearchUrl();
				}
			},
			toTitleCase = function(str) {
				return str.replace(/(?:^|\s)\w/g, function(match) {
					return match.toUpperCase();
				});
		};
		// End Variables
		
		
		$(window).on({
			load: function () {
				getFilterTags();
				getTags();
				getSearchUrl();
			},
			popstate: function () { // Capture browser back and forward buttons, and cleared filters
				getNewFilters();
			}
		});
		
		// Previous and Next Arrows
		$('.pag-arrow').on('click', 'a', function() {
			if ($editMode === false) {
				var $this = $(this),
					$disabled = $(this).parent().hasClass('disabled'),
					$next = $this.parent().hasClass('next');
				if (!$disabled) {
					if ($next) {
						$newPage = parseInt($pageNumber) + 1;
					} else {
						$newPage = parseInt($pageNumber) - 1;
					}
					$fullUrl = window.location.href.replace('.p='+ $pageNumber, '.p='+ $newPage);
					window.history.pushState(null, '', $fullUrl);
					getSearchUrl();
				}
			}
		});
		
		// Filters
		$('.filter-label').on('click', function(e) {
			e.stopPropagation();
			var isType = $('.filter-display-box.active').parent().hasClass('type-filter');
			var box = $(this).siblings('.filter-display-box');
			if (box.hasClass('active')) {
				box.removeClass('active');
			} else {
				$('.filter-display-box').removeClass('active');
				box.addClass('active');
			}
		});
		$('.filter-display-box').on('click', function(e) {
			e.stopPropagation();
		});
		
		$(document.body).on('click', function(e) {
			e.stopPropagation();
			var isType = $('.filter-display-box.active').parent().hasClass('type-filter');
			if ( $('.filter-display-box').hasClass('active') ) {
				$('.filter-display-box').removeClass('active');
				if (isType) {
					getNewType();
				} else {
					getNewFilters();
				}
			} 
		});
		
		$('.filter-actions > button').on('click', function() {
			getNewFilters();
		});
		$('.clear-filters').on('click', function() {
			clearFilters($(this));
		});
		$('.type-actions > button').on('click', function() {
			getNewType();
		});
		
		
		var populateResults = function() {
			var hubInfo = $data || {};
			hubInfo.isArticle = hubInfo.type === 'article';
			hubInfo.isPressRelease = hubInfo.type === 'pressRelease';
			hubInfo.isEvent = hubInfo.type === 'event';
			hubInfo.isPromo = hubInfo.type === 'promo';

			var source = $('#hub-template');
			if(source && source.length) {
				var template = Handlebars.compile(source.html());
				$('.articles-container').append(template(hubInfo));
			}
		};
	}
});


jQuery(function($) {
	var targetElement = $('.banner-embed').find('.campaign')[0];
	var config = {
		attributes : true,
		childList : true,
		characterData : true
	};

	if ($('.banner-embed').find('.campaign').length) {
		var observer = new MutationObserver(function(mutations) {
			mutations.forEach(function() {
				bindBanner();
				observer.disconnect();
			});
		});
		observer.observe(targetElement, config);
	}
	$('div.alert-outer-wrapper.regionCodesDisabled').each(function() {
		bindBannerNew($(this));
	});

	if (Cookies.get('REGION_CODE')) {
		controlAuthoredBanners();
	} else {
		window.addEventListener('regionCookieChange', function(e) {
			controlAuthoredBanners();
		});
	}

	function controlAuthoredBanners() {
		$('div.alert-outer-wrapper.regionCodesEnabled').each(function() {
			//$(this).find('.slide-trigger').addClass('alert-slider-mar-50');
			$(this).hide();
			const allRegionsFlag = $(this).data('allregionsflag');
			if (!allRegionsFlag) {
				const obj = $(this).data('regionlist');
				const regionCode = Cookies.get('REGION_CODE');
				for (var key in obj) {
					let count = 0;
					if ($.parseJSON(obj[key]).region === regionCode) {
						bindBannerNew($(this));
						count++;
					}
					if (count > 0) {
						break;
					}
				}
			} else {
				bindBannerNew($(this));
			}
		});
	}

	function bindBanner() {
		$('.alert-outer-wrapper').fadeIn('fast');
		const bannerPath = $('.banner-embed').data('bannerpath');

		if ($('.mobile-menu').hasClass('open')) {
			$('.alert-outer-wrapper').addClass('alert-hidden');
		}

		if (readCookie(bannerPath) !== null) {
			toggleSlide(0);
		} else {
			createCookie(bannerPath, true, 30);
		}
		$('.slide-trigger').click(function() {
			toggleSlide(400);
		});
	}

	function toggleSlide(animation) {
		$('.slide-panel').slideToggle(animation);
		$('.slide-trigger').find('i').toggleClass('fa-chevron-up fa-chevron-down');
		$('.alert-bg-fade').toggleClass('alert-open');
		$('.alert-bar').toggleClass('alert-depth');
		$('.alert-main').toggleClass('alert-main-depth');
	}

	function bindBannerNew(element) {
		element.fadeIn('fast');
		const bannerPath = element.data('bannerpath');

		if ($('.mobile-menu').hasClass('open')) {
			element.addClass('alert-hidden');
		}

		if (readCookie(bannerPath) !== null) {
			toggleSlideNew(element, 0);
		} else {
			createCookie(bannerPath, true, 30);
		}

	}

	$('.slide-trigger').click(function() {
        if ($(this).closest('.alert-outer-wrapper').find('.slide-trigger').find('i').hasClass('fa-chevron-down')) {
            closeBanners();
        }
        toggleSlideNew($(this).closest('.alert-outer-wrapper'), 400);
	});

    function closeBanners(){
        $('.slide-trigger').each(function() {
            if ($(this).closest('.alert-outer-wrapper').css("display") === "block") {
                if ($(this).closest('.alert-outer-wrapper').find('.slide-trigger').find('i').hasClass('fa-chevron-down')) {
                } else {
                    toggleSlideNew($(this).closest('.alert-outer-wrapper'), 400);
                }
            }
        });
    }

	function toggleSlideNew(element, animation) {
		element.find('.slide-panel').slideToggle(animation);
		element.find('.slide-trigger').find('i').toggleClass('fa-chevron-up fa-chevron-down');
		element.find('.alert-bg-fade').toggleClass('alert-open');
		element.find('.alert-bar').toggleClass('alert-depth');
		element.find('.alert-main').toggleClass('alert-main-depth');
	}

	function createCookie(name, value, days) {
		if (days) {
			var date = new Date();
			date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
			var expires = "; expires=" + date.toGMTString();
		}
		else var expires = "";

		document.cookie = name + "=" + value + expires + "; path=/";
	}

	function readCookie(name) {
		var nameEQ = name + "=";
		var ca = document.cookie.split(';');
		for (var i = 0; i < ca.length; i++) {
			var c = ca[i];
			while (c.charAt(0) === ' ') c = c.substring(1, c.length);
			if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
		}
		return null;
	}
});

(function($, document) {

    var $banner = $('div.banner');
    if ($banner!=null && $banner.length>0 && $("div.alert-banner .alert-outer-wrapper").length>0){
        jQuery.each( $("div.alert-banner .alert-outer-wrapper"), function( i, val ) {
            var bannerpath = val.dataset.bannerpath;
            $banner.append($('<div/>', { 'class': 'banner-embed','data-bannerpath': bannerpath }).html(val));
        });
    }else{
        if ($("div.alert-banner .alert-outer-wrapper").length>0){
            var $main = $('main');
            if ($main!=null && $main.length>0){
                $main.prepend($('<div/>', { 'class': 'div.banner' }));
                $banner = $('div.banner');
                if ($banner!=null && $banner.length>0 && $("div.alert-banner .alert-outer-wrapper").length>0){
                    jQuery.each( $("div.alert-banner .alert-outer-wrapper"), function( i, val ) {
                        var bannerpath = val.dataset.bannerpath;
                        $banner.append($('<div/>', { 'class': 'banner-embed','data-bannerpath': bannerpath }).html(val));
                    });
                }
            }
        }
    }

})(jQuery, document);

$(window).on('load resize', function() {
    var $banner = $('div.banner div.banner-embed');
    if ($banner!=null && $banner.length>0){
        var window_size = window.matchMedia('(min-width: 768px)');
        var offsetRight = 32;
        if (window_size.matches){
            offsetRight = 70;
        }
        var rightmargin = 0;
        $banner.each(function(){
            if ($(this).children(".alert-outer-wrapper").css("display")==="block"){
                $(this).find(".slide-trigger").css({"right":rightmargin});
                rightmargin = rightmargin + offsetRight;
            }
        });
    }
});
jQuery(function ($) {
	if ($('.tag-search-panel-wrapper').length) {
		var endpoint = $( '#api-urls' ).data( 'api-lookup' )+'/region-mappings/',
			searchZip,
			regionCode,
			regionTitle,
			cookieZip = 'LOCATION_ZIP',
			zipInput = $('.tag-search-zip'),
			checkForCookieZip = function() {
				var value = '; ' + document.cookie,
					parts = value.split('; ' + cookieZip + '=');
				if (parts.length === 2) {
					var zip = parts.pop().split(';').shift();
					if (zip.length > 4) {
						zipInput.val(zip);
					}
				}
			},
			getRegionFromZip = function(zipcode, $form, $component) { // Get the region code from service API with zip code
				$.ajax({
					url: endpoint + zipcode + '?type=RCO',
					contentType: "application/json;charset=UTF-8",
					dataType: 'json',
					type: 'GET'
				}).done(function(data) {
					if (data[0]) {
						regionCode = data[0].regionCode;
						if (regionCode.length > 0) {
							getRegionTitle($form, $component);
							getRegionResults($form, $component);
						}
					} else {
						$component.find('.no-tag-search-results-container').fadeIn(100);
                        $component.find('.no-tag-search-results-container').attr("data-context", "no-tag-search-results-container");
					}
				}).fail(function(jqXHR, textStatus) {});
			},
			getRegionTitle = function($form, $component) { // Get the region title from the region code
				$.ajax({
					url: '/bin/location-search.regionCode='+ regionCode + '.json',
					contentType: "application/json;charset=UTF-8",
					dataType: 'json',
					type: 'GET'
				}).done(function(data) {
					if (data.regionTitle) {
						regionTitle = data.regionTitle;
						if (regionTitle.length > 0) {
							$component.find('.region-title').text(regionTitle);
						}
					}
				}).fail(function(jqXHR, textStatus) {});
			},
			getRegionResults = function($form, $component) { // Get the results for the region from the servlet
				var tags = $form.find('.search-tags').data('searchTags');
				while(tags.includes('/')) {
					tags = tags.replace('/', '*')
				}
				$.ajax({
					url: '/bin/sound-alarm.regionCode='+ regionCode + '.tags=' + tags + '.json',
					contentType: "application/json;charset=UTF-8",
					dataType: 'json',
					type: 'GET'
				}).done(function(data) {
					if ( Object.keys(data).length !==0 ) {
						if (data.tags.length) {
							var tagged = data.tags;
							populateResults($component, tagged);
						} else {
							$component.find('.no-tag-search-results-container').fadeIn(100);
                            $component.find('.no-tag-search-results-container').attr("data-context", "no-tag-search-results-container");
                        }
					} else {
						$component.find('.no-tag-search-results-container').fadeIn(100);
                        $component.find('.no-tag-search-results-container').attr("data-context", "no-tag-search-results-container");
                    }
				}).fail(function(jqXHR, textStatus) {});
			},
			invalidZip = function($form) {
				$form.next('.invalid-tag-search-zip').addClass('active');
                $form.next('.invalid-tag-search-zip').attr('data-aa-tag-search-error',"zip Please enter a valid 5 digit zip code");
			},
			populateResults = function($component, results) { // Print the results on the page
				var container = $component.find('.tag-search-results-container'),
					list = container.find('.tag-search-results-list');
				
				$.each(results, function(i, value) {
					list.append('<li><a href="' + value.path + '">' + value.title + '</a>')
				});
				container.fadeIn(100);
				container.attr("data-context","tag-search-results-container");
			};
		
		$('.tag-search-form').on('click', '.cta-button', function(e) {
			e.preventDefault();
			var $this = $(this);
			searchZip = $this.siblings('.tag-search-zip').val();
			
			var $form = $this.parent('.tag-search-form'),
				$component = $this.parents('.tag-search-cta-panel'),
				$container = $component.find('.tag-search-results-container'),
				$list = $component.find('.tag-search-results-list'),
				validZip = /^(?!0{3})\d{5}$/.test(searchZip);

			$(".tag-search-cta-panel").attr("data-context","tag-search-cta-panel");
			$container.fadeOut(100);
            $container.removeAttr("data-context");
			$component.find('.no-tag-search-results-container').fadeOut(100);
            $component.find('.no-tag-search-results-container').removeAttr("data-context");
            $list.empty();
			
			if (validZip) {
				$form.next('.invalid-tag-search-zip').removeClass('active');
                $form.next('.invalid-tag-search-zip').removeAttr('data-aa-tag-search-error');
                getRegionFromZip(searchZip, $form, $component);
			} else {
				invalidZip($form);
			}
		});
		$(window).on('load', function() {
            var reCheck = Cookies.get('LOCATION_ZIP_RECHECK') === 'true' || Cookies.get('LOCATION_ZIP_RECHECK') === true;
            window.addEventListener('zipCookieChange', function () {
                checkForCookieZip();
            });
            if (!reCheck) {
                checkForCookieZip();
            }
		});
	}
});
(function($) {
	var $invalid_zip = $('.invalid-search-zip');

	if ($('header.local').length) {
		var validZip = true,
			searchZip,
			searchPageUrl = $('.search-regions').attr('href'),
			checkForLongRegionTitle = function() {
				var regionTitle = $('.region-title');
				if (regionTitle.text().length > 40) {
					regionTitle.addClass('long-title');
				}
			},
			checkValidZip = function() {
				searchZip = $('#region-zip-search').val();
				validZip = /^(?!0{3})\d{5}$/.test(searchZip);
				if (validZip) {
					submitSearch();
				} else {
                    $invalid_zip.addClass('active');
                    $invalid_zip.attr('data-aa-local-header-nav-error','zip Invalid Zip Code');
				}
			},
			submitSearch = function() {
                $invalid_zip.removeClass('active');
				if($invalid_zip.attr('data-aa-local-header-nav-error')){
                    $invalid_zip.removeAttr('data-aa-local-header-nav-error');
				}
				window.location = searchPageUrl + '?zip=' + searchZip;
			};
		
		checkForLongRegionTitle();
		
		$('.region-search').on('click', 'button', function(e) {
			e.preventDefault();
			checkValidZip();
		});
	}
	
})(jQuery);
(function($, document) {
    function isOdd(number) {
        if (number & 1) {
            return true;
        }
        return false;
    }

    function setPrimarySection() {
        var letters = [];
        var sections = $('.locations-list-section-wrapper');
        sections.each(function() {
            var letter = $(this).attr('id');
            if (letters.indexOf(letter) == -1) {
                letters.push(letter);
            }
        });

        for (var i = 0; i < letters.length; i++) {
            var selector = '#' + letters[i];
            var header = $(selector).find('.collapsible-section-header');
            header.addClass('primary');
            if (isOdd(i)) {
                header.addClass('background-gray');
            }
        }
    }

    function setBinding(component) {
        var _this = $(component);
        _this.on('click', '.collapsible-section-header', function() {
            $(this).find('.plus-minus').toggleClass('open');
            var sibling = $(this).siblings('.collapsible-section-content');
            var letter = sibling.data('letter');
            var selector = '.collapsible-section-content[data-letter="' + letter + '"]';
            $(selector).stop(true, false).slideToggle();
        });
    }

    $(document).on('ready', function() {
        var sections = $('.locations-list-section-wrapper');
        sections.each(function(){
            setBinding(this);
        });
        setPrimarySection();
    });
})(jQuery, document);
(function($, document) {
    function isVisible(element) {
        // Display could be block, inline, inline-block, etc.
        return element.css('display') != 'none';
    }

    function closeAllSections() {
        var headers = $('.collapsible-section-header');
        headers.each(function() {
            var content = $(this).siblings('.collapsible-section-content');
            if (isVisible(content)) {
                $(this).find('.plus-minus').toggleClass('open');
                content.stop(true, false).slideToggle();
            }
        });
    }

    function openTargetSections(target) {
        var wrapper = $(target);
        var sectionContent = wrapper.find('.collapsible-section-content');

        sectionContent.siblings('.collapsible-section-header').find('.plus-minus').toggleClass('open');
        var letter = sectionContent.data('letter');
        var selector = '.collapsible-section-content[data-letter="' + letter + '"]';
        $(selector).stop(true, false).slideToggle('400', function() {
            scrollTo(target);
        });
    }

    function scrollTo(target) {
        if ($(target).length) {
            var headerHeight = $("header.stickynav") ? $("header.stickynav").height() : 0;
            var $anchor = $(target).offset();
            $('html,body').stop().animate({
                scrollTop: $anchor.top - headerHeight
            }, 'slow');
        }
    }

    function setListBinding(component) {
        var _this = $(component);
        var target = _this.attr('href');

        if ($(target).length) {
            _this.click(function (e) {
                e.preventDefault();
                scrollTo(target);
            });
        } else {
            _this.addClass('disabled');
        }
    }

    function setPadBinding(component) {
        var _this = $(component);
        var target = _this.attr('href');
        var cell = _this.closest('.pad-cell');
        if (!$(target).length) {
            cell.addClass('disabled');
        }

        cell.click(function (e) {
            e.preventDefault();

            closeAllSections();
            openTargetSections(target);
        });
    }

    $(document).on('ready', function() {
        var wrapper = $('.locations-list-wrapper');
        var listAnchors = wrapper.find('.alphabetical-navigation-list a');
        listAnchors.each(function() {
            setListBinding(this);
        });

        wrapper.on('click', '.collapsible-nav-header', function() {
            $(this).find('.plus-minus').toggleClass('open');
            var sibling = $(this).siblings('.collapsible-nav-content');
            sibling.stop(true, false).slideToggle();
        });

        var padAnchors = wrapper.find('.alphabetical-navigation-pad a');
        padAnchors.each(function() {
            setPadBinding(this);
        })
    });
})(jQuery, document);
jQuery(function ($) {
    if ($('.location-search-cta-panel').length) {
        var ApiUrl = $('#api-urls').data('api-lookup') + '/region-mappings/';
        var spinner$ = $('.spinner-location'),
            errorText$ = $('.location-search-error-text'),
            results$ = $('.location-search-results-wrapper'),
            resultsSaved$ = $('.location-search-results-wrapper-saved'),
            locationsLink$ = $('.regionLocationsLink'),
            strike$ = $('.location-search-strike'),
            inputBox$ = $('.location-search-input'),
            resultsContainer$ = $('.search-results-container');

        results$.hide();
        resultsSaved$.hide();
        var disableFocus = false;

        var zipCookie = Cookies.get('LOCATION_ZIP');
        var reCheck = Cookies.get('LOCATION_ZIP_RECHECK') === 'true' || Cookies.get('LOCATION_ZIP_RECHECK') === true;
        window.addEventListener('zipCookieChange', function (e) {
            zipCookie = Cookies.get('LOCATION_ZIP');
            setZipFromCookie();
        });

        if (!reCheck && zipCookie) {
            setZipFromCookie();
        }
        $('.location-search-button').on('click', function (e) {
            spinner$.show();
            e.preventDefault();
            var searchZipcode = inputBox$.val(),
                validZip = /^(?!0{3})\d{5}$/.test(searchZipcode);

            if (validZip) {
                errorText$.hide();
                errorText$.removeAttr("data-aa-location-search-error");
                $('.no-results-error').hide();
                disableFocus = false;
                postData(searchZipcode);
            } else {
                displayErrorText('Please enter a valid ZIP code');
            }
        });

        inputBox$.keypress(function (e) {
            var key = e.which;
            if (key === 13) {
                spinner$.show();
                e.preventDefault();
                var searchZipcode = inputBox$.val(),
                    validZip = /^(?!0{3})\d{5}$/.test(searchZipcode);

                if (validZip) {
                    errorText$.hide();
                    errorText$.removeAttr("data-aa-location-search-error");
                    $('.no-results-error').hide();
                    disableFocus = false;
                    postData(searchZipcode);
                } else {
                    displayErrorText('Please enter a valid ZIP code');
                }
            }
        });

        $('.location-search-results-button-inverse').on('click', function (e) {
            location.hash = '';
            location.hash = '#topAnchor';
            $('.location-search-input').focus();
        });
        $('.location-search-results-button').on('click', function (e) {
            var newZip = $('.zip-cont').html().toString().replace(/"/g, "");
            setZipCookies(newZip, false);
            disableFocus = true;
            showResults(newZip);
        });
        $(document).on('ready', function() {
            setSearchZip();
        });
    }

    function setZipFromCookie() {
        $('.location-search-input').val(zipCookie);
        errorText$.hide();
        errorText$.removeAttr("data-aa-location-search-error");
        $('.no-results-error').hide();
        spinner$.show();
        disableFocus = true;
        postData(zipCookie);
    }
    function postData(searchZipCode) {
        var jqxhr = $.get(ApiUrl + searchZipCode.toString() + '?type=RCO', function () {
        })
            .done(function (data) {
                if (Array.isArray(data) && data.length) {
                    getRegionInfo(data[0].regionCode, searchZipCode);
                } else {
                    displayErrorSection();
                }
            })
            .fail(function () {
                displayErrorText('Request Failed, Please try again later');
            })
            .always(function () {

            });
    }

    function getRegionInfo(regionCode, zipCode) {
        var jqxhr = $.get('/bin/location-search.regionCode=' + regionCode + '.json', function () {
        })
            .done(function (data) {
                if (Object.keys(data).length !== 0) {
                    clearBuildResults();
                    buildResults(data, zipCode);
                    strike$.show();
                    spinner$.hide();
                    showResults(zipCode);
                } else {
                    displayErrorSection();
                }

            })
            .fail(function () {
                displayErrorText('Request Failed, Please try again later');
            })
            .always(function () {
            });
        jqxhr.always(function () {
        });
    }

    function displayErrorText(text) {
        errorText$.html(text);
        errorText$.attr("data-aa-location-search-error", text);
        errorText$.show();
        spinner$.hide();
        results$.hide();
        resultsSaved$.hide();
        strike$.hide();
    }


    function displayErrorSection() {
        spinner$.hide();
        results$.hide();
        resultsSaved$.hide();
        strike$.hide();
        $('.no-results-error').show();
    }

    function buildResults(data, zipCode) {
        var locationLink = '';
        var landingPageUrl = '';
        $.each(data, function (idx, obj) {
            if (idx === 'regionLocationsLink') {
                locationLink = obj;
            }
            if (idx === 'landingPageUrl') {
                landingPageUrl = obj;
            }
            if (idx !== 'regionLinks') {
                $('.location-search-cta-panel').find($('.' + idx)).html(' ' + obj);
                if (idx === 'regionPhone') {
                    $('.' + idx).attr('href', 'tel:' + obj);
                }
            } else {
                buildUpLinks(obj);
            }
            if (idx === 'regionCity' || idx === 'regionState') {
                $('.' + idx).append(', ');
            }

        });

        $('.regionTitle').attr('href', landingPageUrl);
        locationsLink$.html('There may be a Red Cross chapter office closer to you than our Regional Headquarters. View other locations');
        locationsLink$.attr('href', locationLink);

        $('.zip-cont').html('"' + zipCode + '"');
        $('.zip-cont').attr('data-aa-zip-code', zipCode);
        $('.zip-cont-sub').html(zipCode);

    }

    function showSection(saved) {
        if (!saved) {
            resultsSaved$.hide();
            resultsContainer$.show();
            results$.show();
        } else {
            results$.hide();
            resultsContainer$.show();
            resultsSaved$.show();
        }
        if (!disableFocus) {
            location.hash = '';
            location.hash = '#locationFound';
        }

    }

    function buildUpLinks(passedData) {
        $('.search-link-list').html('');
        $.each(passedData, function (idx, obj) {
            var parsedObj = obj;
            $('.search-link-list').append('<li class="search-link-list-item"><a target="_blank" class="search-base-link"></a></li>');
            $('.search-base-link').addClass('search-link-list-item-text' + idx);
            $('.search-link-list-item-text' + idx).removeClass('search-base-link');
            $('.search-link-list-item-text' + idx).attr('href', parsedObj.link);
            $('.search-link-list-item-text' + idx).html(parsedObj.displayName);
        });
    }

    function showResults(enteredZip) {
        var storedCode = Cookies.get('LOCATION_ZIP');
        if (enteredZip === storedCode) {
            showSection(true);
        } else {
            showSection(false);
        }
    }

    function setZipCookies(zip, shouldRecheck) {
        if (zip != null) {
            Cookies.set('LOCATION_ZIP', zip);
            var evt = new CustomEvent('zipCookieChange', { detail: zip });
            window.dispatchEvent(evt);
            getRegionFromZip(zip); // Set the zip code for the utility header dropdown
            setZipCodeBase(zip) // Set the zip code for the utility header dropdown
        }
        Cookies.set('LOCATION_ZIP_RECHECK', shouldRecheck);
    }
    function getRegionFromZip(zipcode) {
        $.ajax({
            url: $('#api-urls').data('api-lookup') + '/region-mappings/' + zipcode + '?type=RCO',
            contentType: "application/json;charset=UTF-8",
            dataType: 'json',
            type: 'GET'
        }).done(function (data) {
            if (data.length) {
                var regionCode = data[0].regionCode,
                    regionTitle = data[0].regionName;
                if (regionTitle) {
                    setRegionLabel(regionTitle);
                    setLocalRegionLink(regionCode);
                    setRegionCookie(regionCode);
                } else {
                    setRegionLabel(defaultRegion);
                    Cookies.remove('REGION_CODE');
                }
            } else {
                setRegionLabel(defaultRegion);
                Cookies.remove('REGION_CODE');
            }
        }).fail(function () { });
    }
    function setRegionLabel(label) {
        $('.current-region-label').text(label);
    }
    function setZipCodeBase (zipcode) {
        $('.current-zip').text(zipcode);
    }

    function setRegionCookie(regionCode) {
        Cookies.set('REGION_CODE', regionCode);
        if (typeof ContextHub !== "undefined") {
            ContextHub.getStore('regioncode').setRegionCode(regionCode);
        }
        const evt = new CustomEvent('regionCookieChange', { detail: regionCode });
        window.dispatchEvent(evt);
    }

    function setLocalRegionLink(regionCode) {
        $.ajax({
            url: '/bin/location-search.regionCode=' + regionCode + '.json',
            contentType: "application/json;charset=UTF-8",
            dataType: 'json',
            type: 'GET'
        }).done(function (data) {
            if (data.landingPageUrl) {
                var regionLink = data.landingPageUrl;

                $('.visit-local-site').attr('href', regionLink);
            }
        }).fail(function (jqXHR, textStatus) { });
    }

    function setSearchZip() {
        if (window.location.href.split('zip=')[1]) {
            var zip = window.location.href.split('zip=')[1].match(/\d{1,5}/) ? window.location.href.split('zip=')[1].match(/\d{1,5}/)[0] : '';
            if (zip !== '') {
                $('.location-search-input').val(zip);
                errorText$.hide();
                errorText$.removeAttr("data-aa-location-search-error");
                $('.no-results-error').hide();
                disableFocus = false;
                Cookies.set('LOCATION_ZIP_RECHECK', false);
                spinner$.show();
                postData(zip);
            }
        }
    }
    function clearBuildResults(){
        $('.location-search-cta-panel .location-search-text-cont').find($('.regionTitle')).html('');
        $('.location-search-cta-panel .location-search-text-cont').find($('.regionStreet')).html('');
        $('.location-search-cta-panel .location-search-text-cont').find($('.regionCity')).html('');
        $('.location-search-cta-panel .location-search-text-cont').find($('.regionState')).html('');
        $('.location-search-cta-panel .location-search-text-cont').find($('.regionZip')).html('');
        $('.location-search-cta-panel .location-search-text-cont').find($('.regionPhone')).html('');
        $('.location-search-cta-panel .location-search-text-cont').find($('.search-link-list')).html('');
    }
});

(function($, document) {
    $('.show-locations').on('click', function() {
        $(this).find('.plus-minus').toggleClass('open');
        $(this).siblings('.mobile-cards').stop(true, false).slideToggle();
    });

})(jQuery, document);

function initLocationMap() {
    var mapContainersList = document.querySelectorAll('.location-map-container');
    var mapContainers = [];
    Array.prototype.forEach.call(mapContainersList, function (item) {
        mapContainers.push(item);
    });

    (function takeNextMap() {
        if (mapContainers.length) {
            var mapContainer = mapContainers.shift();
            $.when(buildMap(mapContainer, jQuery)).done(function(succeeded) {
                if (succeeded) {
                    takeNextMap();
                }
            });
        }
        // Otherwise we're all done
    })();
}

function buildMap(mapContainer, $) {
    var mapDeferred = $.Deferred();
    var MAX_RETRIES = 20;
    var GEOCODE_PAUSE = 250;
    var retryAttempts = 0;
    var locationQueue = [];
    var numberOfCards = 0;

    var rcoRegionMap = new google.maps.Map(mapContainer.querySelector('.map_canvas'), {
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        gestureHandling: 'cooperative'
    });
    var rcoRegionGeocoder = new google.maps.Geocoder();
    var rcoRegionBounds = new google.maps.LatLngBounds();

    buildLocationsList();

    takeNextGeocoding();

    return mapDeferred.promise();

    function buildLocationsList() {
        var locationCards = mapContainer.querySelector('.mobile-cards').querySelectorAll('.location-card');
        numberOfCards = locationCards.length;
        for (var i = 0; i < locationCards.length; i++) {
            locationQueue.push(buildLocationObject(locationCards[i]));
        }
    }

    function takeNextGeocoding() {
        if (locationQueue.length) {
            var locationObject = locationQueue.shift();

            $.when(geocodeAddress(locationObject)).done(function (pinPosition) {
                var marker = new google.maps.Marker({
                    map: rcoRegionMap,
                    position: pinPosition,
                    icon: '/etc/clientlibs/redcross/rcolocalcontent/base/images/icon-pin.png',
                    shadow: true,
                    optimized: false,
                    title: `Location Pin: ${locationObject.address}`
                });

                createInfoWindow(marker, locationObject.formattedAddress);

                rcoRegionBounds.extend(pinPosition);

                takeNextGeocoding();
            });
        } else {
            // Finished processing everything we can
            rcoRegionMap.setCenter(rcoRegionBounds.getCenter());
            rcoRegionMap.fitBounds(rcoRegionBounds);
            var options = { minZoom: 6, maxZoom: 14 };
            if (numberOfCards == 1) {
                options = { minZoom: 6, maxZoom: 14, zoom: 12 };
            }
            rcoRegionMap.setOptions(options);
            mapDeferred.resolve(true);
        }
    }

    function geocodeAddress(location) {
        var deferred = $.Deferred();
        var retryCounter = 0;

        (function attemptGeocode() {
            rcoRegionGeocoder.geocode({'address': location.address}, function(results, status) {
            if (status === google.maps.GeocoderStatus.OK) {
                deferred.resolve(results[0].geometry.location);
            } else if (retryCounter > MAX_RETRIES) {
                deferred.reject({
                    status: status,
                    address: location.address,
                    message: 'Geocode has reached the maximum number of attempts for this address.'
                });
            } else if (status === google.maps.GeocoderStatus.OVER_QUERY_LIMIT) {
                setTimeout(function() {
                    attemptGeocode();
                    retryCounter++;
                }, GEOCODE_PAUSE);
            } else {
                deferred.reject({
                    status: status,
                    address: location.address,
                    message: 'Geocoder failed with an unexpected error.'
                });
            }
            });
        })();
        return deferred.promise();
    }

    function createInfoWindow(marker, address) {
        var infowindow = new google.maps.InfoWindow({});
        google.maps.event.addListener(marker, 'click', (function (marker, address) {
            return function () {
                infowindow.setContent(address);
                infowindow.open(rcoRegionMap, marker);
            }
        })(marker, address));
    }

    function buildLocationObject(card) {
        var locationObject = {};
        var title = $(card).find('h5').text();
        var street = $(card).find('street').text();
        var city = $(card).find('city').text();
        locationObject.address = cleanAddress(street + ' ' + city);
        var getDirectionsLink = 'https://www.google.com/maps/search/?api=1&query=' + encodeURIComponent(locationObject.address);
        locationObject.formattedAddress = formatAddress(title, street, city, getDirectionsLink);
        return locationObject;
    }

    function formatAddress(title, street, city, getDirectionsLink) {
        var formattedAddress = '<strong>' + title + '</strong><br />';
        formattedAddress += street + '<br />';
        formattedAddress += city + '<br />';
        formattedAddress += '<a href="' + getDirectionsLink + '">Get Directions</a>';
        return formattedAddress;
    }

    function cleanAddress(address) {
        var cleanedAddress = address;

        cleanedAddress = address
                            .replace(/#/g, '%23')
                            .replace(/%/g, '%25')
                            .replace(/"/g, '%22');

        return cleanedAddress;
    }
}
(function($, document) {
    var isChrome = navigator.userAgent.indexOf('Chrome') > -1;
    var isSafari = navigator.userAgent.indexOf('Safari') > -1;
    if(isSafari && !isChrome) {
        $('.image-wrapper').addClass('is-safari');
    }

    $('.location-info').attr('data-context','location-info');
})(jQuery, document);
(function ($, document) {
    var months = {
        "en-US": ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        "es-PR": ["enero", "feb.", "marzo", "abr.", "mayo", "jun.", "jul.", "agosto", "sept.", "oct.", "nov.", "dic."]
    };

    var daysOfWeek = {
        "en-US": ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        "es-PR": ["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"]
    };


    function setDateInfo(component) {
        var _this = $(component);
        var pageLanguage = _this.data("page-language");
        var dateElement = _this.find('.date');
        var singleDate = dateElement.data('singledate');
        var yearSeparator = pageLanguage == "es-PR" ? " de " : ', '; // use 'de' instead of comma on spanish dates
        if (singleDate) {
            singleDate = formatDate(singleDate, pageLanguage);
            dateElement.html('<div class="day">' + singleDate.day + '</div>');
            dateElement.append(singleDate.date + yearSeparator + singleDate.year + '<br>\n');
        } else {
            var startDateTime = dateElement.data('startdatetime');
            var endDateTime = dateElement.data('enddatetime');
            if (startDateTime && endDateTime) {
                var startDate = formatDate(startDateTime, pageLanguage);
                var endDate = formatDate(endDateTime, pageLanguage);
                if ((startDate.date + ' ' + startDate.year) === (endDate.date + ' ' + endDate.year)) {
                    dateElement.html('<div class="day">' + startDate.day + '</div>');
                    dateElement.append(endDate.date + yearSeparator + startDate.year);
                }
                else {
                    let formattedStart = startDate.day + ", " + startDate.date;
                    if (startDate.year !== endDate.year) { // Only include year if not matching
                        formattedStart += ', ' + startDate.year;
                    }
                    let formattedEnd = endDate.day + ", " + endDate.date + yearSeparator + endDate.year   // Day, MMM D (,|de) YYYY
                    dateElement.append('<div class="day">' + formattedStart + ' - </div>');
                    dateElement.append('<div class="day">' + formattedEnd + '</div>');
                }
            }
        }
    }

    $(document).on('ready', function () {
        var isChrome = navigator.userAgent.indexOf('Chrome') > -1;
        var isSafari = navigator.userAgent.indexOf('Safari') > -1;
        if (isSafari && !isChrome) {
            $('.image-wrapper').addClass('is-safari');
        }
        var eventPromoComponent = $('.event-promo-info-container');
        eventPromoComponent.each(function () {
            setDateInfo(this);
        });
    });
    function formatDate(dateString, locale) {
        dateString = dateString.replace(/Z|-\d{2}:.*/, ""); // Remove trailing timezone
        let date = new Date(dateString);
        return {
            "date": locale == "en-US" ? months[locale][date.getMonth()] + ' ' + date.getDate() : date.getDate() + " de " + months[locale][date.getMonth()], // date format is different for Spanish
            "year": date.getFullYear(),
            "day": daysOfWeek[locale][date.getDay()]
        };
    }
})(jQuery, document);
jQuery(function($) {
	if ($('.donation-thermometer').length) {
			var thermometer = $('.donation-thermometer'),
			entityId = thermometer.data('id'),
			donations,
			goal,
			goalConverted,
			numberOfBlocks,
			innerBlocksObject = '<span class="block-label">$0</span>',
			percentage,
			offlineDonations = thermometer ? thermometer.data('offlineDonations') || 0 : 0,
			additionalOfflineDonations = thermometer && thermometer.data('additionalOfflineDonations') != null ? thermometer.data('additionalOfflineDonations') + '' : "",
			totalAdditionalOfflineDonations = additionalOfflineDonations ? additionalOfflineDonations.match(/\d+/g).reduce(function(a,b) {return +a + +b;}) : 0,
			additionalThermometerCounterEntityIds = thermometer ? thermometer.data('additionalThermometerCounterEntityIds') || "" : "",
			getDonationPercentage = function() {
				percentage = (donations + offlineDonations) / goal * 100 + '%';
			},
			getGoalDigits = function() {
				var goalString = String(goal),
					goalDigits = goalString.split('').length,
					goalPrefix;
				switch (goalDigits) {
					case 4:
					    goalPrefix = goal/1000;
					    goalConverted = goalPrefix + 'K';
					    break;
					case 5:
						goalPrefix = goalString.substring(0,2);
						goalConverted = goalPrefix + 'K';
						break;
					case 6:
						goalPrefix = goalString.substring(0,3);
						goalConverted = goalPrefix + 'K';
						break;
					case 7:
						goalPrefix = goalString.substring(0,1);
						goalConverted = goalPrefix + 'M';
						break;
					case 8:
						goalPrefix = goalString.substring(0,2);
						goalConverted = goalPrefix + 'M';
						break;
					case 9:
						goalPrefix = goalString.substring(0,3);
						goalConverted = goalPrefix + 'M';
						break;
					default:
						goalConverted = goalString;
						break;
				}
			},
			getInnerBlocks = function() {
				var increment = goal / numberOfBlocks,
					block = increment;
				for (var i = 1; i < numberOfBlocks; i++) {
					var blockString = String(block),
						blockDigits = blockString.split('').length,
						blockPrefix,
						blockPrint;
					switch (blockDigits) {
					    case 4:
					        blockPrefix = block/1000;
					        blockPrint = blockPrefix + 'K';
					        break;
						case 5:
							blockPrefix = blockString.substring(0,2);
							blockPrint = blockPrefix + 'K';
							break;
						case 6:
							blockPrefix = blockString.substring(0,3);
							blockPrint = blockPrefix + 'K';
							break;
						case 7:
							blockPrefix = blockString.substring(0,1);
							blockPrint = blockPrefix + 'M';
							break;
						case 8:
							blockPrefix = blockString.substring(0,2);
							blockPrint = blockPrefix + 'M';
							break;
						case 9:
							blockPrefix = blockString.substring(0,3);
							blockPrint = blockPrefix + 'M';
							break;
						default:
							blockPrint = block;
							break;
					}
					
					innerBlocksObject += '<span class="internal-block block-label">$' + blockPrint +  '</span>';
					block = block + increment;
				}
				innerBlocksObject += '<span class="block-label goal-label">$' + goalConverted + '</span>';
			},
			populateThermometer = function() {
				$('.thermometer-blocks').html(innerBlocksObject);
				$('.mercury').css('width', percentage);
			};
				
		// Use the ID to get the donation amount and number of contributions
		var donationApi = document.getElementById('api-urls').getAttribute('data-api-donation');

		if(!!additionalThermometerCounterEntityIds) {
			$.ajax({
				url: donationApi + '/thermometers/multiple/' + entityId + ',' + additionalThermometerCounterEntityIds,
				contentType: "application/json;charset=UTF-8",
				dataType: 'json',
				type: 'GET',
				error: function() {
					populateThermometer();
				},
				success: function(data) {					
					let donationsTotal = 0;

					data.forEach((thermoData) => {
						donationsTotal += thermoData.donations;
					});

					if(parseInt(totalAdditionalOfflineDonations) > 0) {
						donationsTotal += parseInt(totalAdditionalOfflineDonations);
					}

					donations = donationsTotal;
					goal = data[0].goal;
					numberOfBlocks = data[0].numberOfBlocks;
					getGoalDigits();
					getDonationPercentage();
					getInnerBlocks();
					populateThermometer();
					
				}
			});
		} else {
			$.ajax({
				url: donationApi + '/thermometers/' + entityId,
				contentType: "application/json;charset=UTF-8",
				dataType: 'json',
				type: 'GET',
				error: function() {
					populateThermometer();
				},
				success: function(data) {
					donations = data.donations;
					goal = data.goal;
					numberOfBlocks = data.numberOfBlocks;
					getGoalDigits();
					getDonationPercentage();
					getInnerBlocks();
					populateThermometer();
				}
			});
		}

	}
});
function _typeof(obj) {
    "@babel/helpers - typeof";
    return (
        (_typeof =
            "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                ? function (obj) {
                    return typeof obj;
                }
                : function (obj) {
                    return obj &&
                    "function" == typeof Symbol &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                        ? "symbol"
                        : typeof obj;
                }),
            _typeof(obj)
    );
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly &&
        (symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })),
            keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2
            ? ownKeys(Object(source), !0).forEach(function (key) {
                _defineProperty(target, key, source[key]);
            })
            : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    target,
                    Object.getOwnPropertyDescriptors(source)
                )
                : ownKeys(Object(source)).forEach(function (key) {
                    Object.defineProperty(
                        target,
                        key,
                        Object.getOwnPropertyDescriptor(source, key)
                    );
                });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (_typeof(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
try {
    var ua = window.navigator.userAgent,
        isIE = /MSIE|Trident/.test(ua);
    if (!isIE) {
        // Close lightbox on click outside of lightbox
        var sustainer = document.getElementById("sustainer");
        if (sustainer) {
            // Define satelliteEvent function
            var sustainerSatelliteEvent = function sustainerSatelliteEvent(
                eventString
            ) {
                try {
                    var SATELLITE = window._satellite;
                    SATELLITE.track("lightboxEvent", {
                        eventName: eventString
                    });
                } catch (e) {
                    console.error({
                        e: e
                    });
                }
            }; // Throw the impression event
            // Open function for button click to ease testing
            var openSustainer = function openSustainer() {
                sustainer.classList.add("open");
                sustainerSatelliteEvent("impression");
            };

            // JS Background Image script
            var backgroundElements = Array.from(
                document.getElementsByClassName("js-bg-image")
            );
            backgroundElements.forEach(function (element) {
                element.style.backgroundImage = "url(".concat(element.dataset.bg, ")");
            });

            // Get relevant data from sessionStorage
            var donorInfo = JSON.parse(sessionStorage.donorInfo);
            var designationInfo = JSON.parse(sessionStorage.designationInfo);

            // START THRESHOLDS
            // Get the container to remove later, an array of the elements, and the hard cap as consts
            var thresholdContainer,
                thresholdElements,
                hardCap,
                thresholdCaps,
                thresholdDonationAmounts;
            try {
                thresholdContainer = sustainer.getElementsByClassName(
                    "threshold-container"
                )[0];
                thresholdElements = Array.from(
                    sustainer.getElementsByClassName("threshold-data")
                );
            } catch (e) {
                console.error({
                    e: e
                });
            }

            // Remove thresholds from markup to prevent screenreaders from reading them out and because we have the
            // data now.
            thresholdContainer ? thresholdContainer.remove() : null;

            // If we have thresholdElements, we'll process the thresholds out of them.
            if (thresholdElements.length >= 1) {
                // The strings need to turn into JSONs
                var thresholdsProcessed = thresholdElements.map(function (
                        thresholdElement
                    ) {
                        // Parse into JSON
                        var thresholdData = JSON.parse(thresholdElement.innerHTML);
                        // Convert values for each key into integers
                        for (property in thresholdData) {
                            var parsedData = parseFloat(thresholdData[property]),
                                roundedNumber = Math.round(parsedData);
                            thresholdData[property] = isNaN(parsedData)
                                ? thresholdData[property]
                                : roundedNumber;
                        }
                        // Return full converted object
                        return thresholdData;
                    }),
                    // We then sort them by the cap first and the monthly amount second, leaving them next to each
                    // other if they're identical.
                    thresholds = thresholdsProcessed.sort(function (a, b) {
                        if (a.sustainerThresholdCap > b.sustainerThresholdCap) {
                            return 1;
                        } else if (a.sustainerThresholdCap < b.sustainerThresholdCap) {
                            return -1;
                        } else {
                            if (
                                a.sustainerThresholdDonationAmount <
                                b.sustainerThresholdDonationAmount
                            ) {
                                return 1;
                            } else if (
                                a.sustainerThresholdDonationAmount >
                                b.sustainerThresholdDonationAmount
                            ) {
                                return -1;
                            } else {
                                return 0;
                            }
                        }
                    });
                // Make new arrays in the vars we declared outside of this decision flow to get the arrays we want
                thresholdCaps = thresholds.map(function (thresholdObject) {
                    return thresholdObject.sustainerThresholdCap;
                });
                thresholdDonationAmounts = thresholds.map(function (thresholdObject) {
                    return thresholdObject.sustainerThresholdDonationAmount;
                });
            } else {
                // if we don't have thresholds from markup, we'll use the OG default values
                thresholdCaps = [
                    100, 149, 199, 299, 399, 499, 599, 699, 799, 899, 1000
                ];
                thresholdDonationAmounts = [
                    10, 15, 20, 25, 35, 50, 60, 65, 70, 85, 100
                ];
            }
            hardCap = thresholdCaps[thresholdCaps.length - 1];

            // Test for necessary criteria
            testCriteria = function testCriteria(ss, di) {
                var errors = [
                    ss.pay_type === "credit-card",
                    di.donationAmount <= hardCap,
                    di.frequency === "oneTime",
                    di.address_country === "US"
                ];
                return !errors.includes(false);
            };
            if (testCriteria(sessionStorage, donorInfo)) {
                // Calculate the monthly donation amount (Put here so we can use it in the text replace next)
                var getMonthlyDonationAmount = function getMonthlyDonationAmount(
                        oneTimeDonationAmount
                    ) {
                        // We're going to use the float value of the monthly donation amount string
                        var oneTimeDonationAmountFloat = parseFloat(oneTimeDonationAmount),
                            // Because the ranges didn't mathematically correspond to the monthly
                            // donation amounts, we did this rather than a simpler function. The arrays
                            // store the range maxes and the monthly donation amounts. Turns out, we can
                            // test the one-time amount against the maximums and see how many it exceeds.
                            // If we use the number of exceeded maximum as an index on the monthly
                            // amounts, we get the proper amount.
                            rangeMaximumsSubceeded = thresholdCaps.filter(function (
                                threshold
                            ) {
                                return oneTimeDonationAmountFloat <= threshold;
                            }).length,
                            monthlyDonationAmountResult =
                                thresholdDonationAmounts[
                                thresholdCaps.length - rangeMaximumsSubceeded
                                    ];
                        monthlyDonationAmountResult = "".concat(
                            parseFloat(monthlyDonationAmountResult).toFixed(2)
                        );
                        return monthlyDonationAmountResult;
                    },
                    monthlyDonationAmount = getMonthlyDonationAmount(
                        donorInfo.donationAmount
                    ),
                    getMonthlyDonationDate = function getMonthlyDonationDate() {
                        var currentDate = new Date(),
                            nextDate = [28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31];
                        return currentDate.getDate() <= nextDate[currentDate.getMonth()]
                            ? currentDate.getDate()
                            : nextDate[currentDate.getMonth()];
                    },
                    // Find the cardinal date suffix
                    nth = function nth(d) {
                        if (d > 3 && d < 21) return "th";
                        switch (d % 10) {
                            case 1:
                                return "st";
                            case 2:
                                return "nd";
                            case 3:
                                return "rd";
                            default:
                                return "th";
                        }
                    };

                // Add monthlyDonationAmount to sessionStorage
                sessionStorage.donorInfo = JSON.stringify(
                    _objectSpread(
                        _objectSpread({}, donorInfo),
                        {},
                        {
                            monthlyDonationAmount: monthlyDonationAmount
                        }
                    )
                );

                // Replace every instance of `#monthlyDonationAmount` with $monthlyDonationAmount
                sustainer.innerHTML = sustainer.innerHTML.replaceAll(
                    "#monthlyDonationAmount",
                    "$".concat(parseInt(monthlyDonationAmount))
                );

                // Create a string of the monthlyDonationDate and the cardinal date suffix from nth()
                var monthlyDonationDate = getMonthlyDonationDate(),
                    monthlyDonationDateString = ""
                        .concat(monthlyDonationDate)
                        .concat(nth(monthlyDonationDate));

                // Replace every instance of `#monthlyDonationDate` with monthlyDonationDateString
                sustainer.innerHTML = sustainer.innerHTML.replaceAll(
                    "#monthlyDonationDate",
                    monthlyDonationDateString
                );

                // Begin attaching events and such
                var toggleSustainer = function toggleSustainer() {
                        sustainer.classList.toggle("open");
                        document
                            .getElementsByClassName("sustainer-base")[0]
                            .classList.remove("hide");
                        document
                            .getElementsByClassName("sustainer-confirm")[0]
                            .classList.add("hide");
                    },
                    declineSustainer = function declineSustainer() {
                        sustainer.classList.remove("open");
                        document
                            .getElementsByClassName("sustainer-base")[0]
                            .classList.remove("hide");
                        document
                            .getElementsByClassName("sustainer-confirm")[0]
                            .classList.add("hide");
                        sustainerSatelliteEvent("decline");
                    },
                    closeSustainer = function closeSustainer() {
                        sustainer.classList.remove("open");
                        document
                            .getElementsByClassName("sustainer-base")[0]
                            .classList.remove("hide");
                        document
                            .getElementsByClassName("sustainer-confirm")[0]
                            .classList.add("hide");
                    };

                // Deal with designationInfo
                var slbDesignation = null,
                    slbDesignationFlag = false,
                    slbDesignationCheck = function slbDesignationCheck(designation) {
                        try {
                            var errors = [
                                !!designation.desName,
                                designation.desName.length > 0,
                                !!designation.id,
                                typeof designation.id === "number",
                                designation.id > 0,
                                !!designation.sourceCode,
                                designation.sourceCode.length > 0,
                                !!designation.subSourceCode,
                                designation.subSourceCode.length > 0,
                                !!designation.fundCode,
                                designation.fundCode.length > 0,
                                !!designation.slbDescription,
                                designation.slbDescription.length > 0
                            ];
                            return !errors.includes(false);
                        } catch (e) {
                            return false;
                        }
                    };
                if (designationInfo.frequency === "both") {
                    slbDesignation = designationInfo;
                    slbDesignationFlag = slbDesignationCheck(slbDesignation);
                } else {
                    if (
                        designationInfo.fallback !== undefined &&
                        ["both", "monthly"].includes(designationInfo.fallback.frequency)
                    ) {
                        slbDesignation = designationInfo.fallback;
                        // the SLB should use the SLB Description from the fallback designation and use the fallback's SLB description if no override was added
                        slbDesignation.slbDescription = designationInfo.slbDescriptionOverride || slbDesignation.slbDescription;
                        slbDesignationFlag = slbDesignationCheck(slbDesignation);
                    }
                }

                // Display relevant description
                // slbDesignation check first
                if (slbDesignationFlag) {
                    sustainer
                        .getElementsByClassName("slbdesc")[0]
                        .classList.add("designation");
                    sustainer.getElementsByClassName("slbdesc")[0].textContent =
                        slbDesignation.slbDescription;
                } else {
                    // defaults, always finally falling back to DR
                    switch (slbDesignation.desName) {
                        case "Blood Services":
                            sustainer
                                .getElementsByClassName("bsdesc")[0]
                                .classList.add("designation");
                            break;
                        case "Disaster Relief":
                            sustainer
                                .getElementsByClassName("drdesc")[0]
                                .classList.add("designation");
                            break;
                        case "Your Local Red Cross":
                            sustainer
                                .getElementsByClassName("ylrcdesc")[0]
                                .classList.add("designation");
                            break;
                        case "Where It Is Needed Most":
                        case "WIINM":
                            sustainer
                                .getElementsByClassName("wiinmdesc")[0]
                                .classList.add("designation");
                            break;
                        default:
                            sustainer
                                .getElementsByClassName("drdesc")[0]
                                .classList.add("designation");
                            break;
                    }
                }

                // Add toggleSustainer event listener to the sustainer itself, not the content box
                sustainer.addEventListener("click", function (e) {
                    toggleSustainer();
                });

                // Toggle the lightbox open for the first time
                openSustainer();

                // Stop propogation inside of the content box
                var box = sustainer.getElementsByClassName("sustainer-box")[0];
                box.addEventListener("click", function (e) {
                    e.stopPropagation();
                });

                // Get the fund code for the designation
                var getFundCode = function getFundCode() {
                        if (slbDesignationFlag) {
                            return slbDesignation.fundCode;
                        } else {
                            switch (donorInfo.designation) {
                                case "Blood Services":
                                    return "2151";
                                case "Disaster Relief":
                                    return "4900";
                                case "Where It Is Needed Most":
                                case "WIINM":
                                    return "0000";
                                case "Your Local Red Cross":
                                    return "9301";
                                default:
                                    return "4900";
                            }
                        }
                    },
                    getDesignationName = function getDesignationName() {
                        if (slbDesignationFlag) {
                            return slbDesignation.desName;
                        } else {
                            if (
                                [
                                    "Blood Services",
                                    "Disaster Relief",
                                    "Where It Is Needed Most",
                                    "WIINM",
                                    "Your Local Red Cross"
                                ].includes(donorInfo.designation)
                            ) {
                                return donorInfo.designation;
                            } else {
                                return "Disaster Relief";
                            }
                        }
                    },
                    getDesignationId = function getDesignationId() {
                        if (slbDesignationFlag) {
                            return slbDesignation.id;
                        } else {
                            if (
                                [
                                    "Blood Services",
                                    "Disaster Relief",
                                    "Where It Is Needed Most",
                                    "WIINM",
                                    "Your Local Red Cross"
                                ].includes(donorInfo.designation)
                            ) {
                                return donorInfo.designationId;
                            } else {
                                return "100005";
                            }
                        }
                    },
                    // Generic cookie-getting function
                    getCookie = function getCookie(cname) {
                        var name = cname + "=";
                        var decodedCookie = decodeURIComponent(document.cookie);
                        var ca = decodedCookie.split(";");
                        for (var i = 0; i < ca.length; i++) {
                            var c = ca[i];
                            while (c.charAt(0) == " ") {
                                c = c.substring(1);
                            }
                            if (c.indexOf(name) == 0) {
                                return c.substring(name.length, c.length);
                            }
                        }
                        return "";
                    },
                    // Get the sustainer id from cookies
                    getSustainerId = function getSustainerId() {
                        // const urlParams = new URLSearchParams(window.location.search)
                        // sus = urlParams.get('sustainerId')
                        var susID = getCookie("sustainerID");
                        var id = atob(susID);
                        return id.substring(6, id.length - 6);
                    },
                    // Get microsite status from purpose-built data attribute
                    getMicrosite = function getMicrosite() {
                        return "".concat(sustainer.dataset.rt.includes("microsite"));
                    },
                    currentURL =
                        "https://" + window.location.host + window.location.pathname,
                    apiBaseURL = currentURL.substring(0, currentURL.length - 5),
                    apiRequest = {
                        amount: getMonthlyDonationAmount(donorInfo.donationAmount),
                        currency: "USD",
                        billingInfo: {
                            firstName: donorInfo.firstName,
                            lastName: donorInfo.lastName,
                            email: donorInfo.email,
                            phone: donorInfo.phone_billing,
                            addressLine1: donorInfo.address_line1,
                            addressLine2: donorInfo.address_line2,
                            city: donorInfo.address_city,
                            zipCode: donorInfo.address_postal_code,
                            state: donorInfo.address_state,
                            country: donorInfo.address_country
                        },
                        paymentMethodToken: getSustainerId(),
                        email: donorInfo.email,
                        designationId: getDesignationId(),
                        donationEntityId: donorInfo.entityId,
                        receiptUrl: "".concat(apiBaseURL, "/error.html"),
                        errorUrl: "".concat(apiBaseURL, "/receipt.html"),
                        recurringFrequency: "monthly",
                        delayedBilling: true,
                        fdrInfo: {
                            microsite: getMicrosite(),
                            tpf: "false",
                            tpfAmount: "0",
                            designationName: getDesignationName(),
                            companyName: donorInfo.hasOrganization
                                ? donorInfo.organization
                                : "",
                            sourceCode: slbDesignationFlag
                                ? slbDesignation.sourceCode
                                : donorInfo.sourceCode,
                            subSourceCode: slbDesignationFlag
                                ? slbDesignation.subSourceCode
                                : donorInfo.subSourceCode,
                            fundCode: getFundCode(),
                            internalDonationPageName: donorInfo.internalDonationPageName,
                            donationEntityUrl: donorInfo.donationEntityUrl,
                            donationLanguage: "ENGLISH",
                            premiumOptIn: false,
                        },
                        fdrCustomFields: []
                    };
                var grayOutDonateButton = function grayOutDonateButton(element) {
                    element.disabled = true;
                    element.classList.remove("red");
                    element.style.border = "1px solid gray";
                };

                // Delete sustainerID cookie now that we're done using it
                var hostPieces = window.location.host.split("."),
                    domain = "."
                        .concat(hostPieces[hostPieces.length - 2], ".")
                        .concat(hostPieces[hostPieces.length - 1]);
                document.cookie = "sustainerID=; path=/; domain="
                    .concat(domain, "; expires=")
                    .concat(new Date(0).toUTCString());
                document.cookie = "sustainerID=; path=/; expires=".concat(
                    new Date(0).toUTCString()
                );

                // Method to send donation request
                var donateButton = document.getElementById("sustainer-donate"),
                    closeButton = document.getElementById("sustainer-close"),
                    returnButton = document.getElementById("sustainer-return");
                var sendDonation = function sendDonation() {
                    sustainerSatelliteEvent("accept");
                    grayOutDonateButton(donateButton);
                    var donationsApiUrl =
                            document.getElementById("api-urls").dataset.apiDonation,
                        endpoint = "".concat(donationsApiUrl, "/subscriptions/paypal");
                    fetch(endpoint, {
                        method: "POST",
                        headers: {
                            Accept: "application/json",
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(apiRequest)
                    })
                        .then(function (response) {
                            if (response.status === 201) {
                                // Swap out the base content with confirmation content
                                document
                                    .getElementsByClassName("sustainer-base")[0]
                                    .classList.toggle("hide");
                                document
                                    .getElementsByClassName("sustainer-confirm")[0]
                                    .classList.toggle("hide");
                            } else {
                                console.error(
                                    "The SLB API request returned an unexpected HTTP status."
                                );
                                throw new Error("SLB Transaction Failure");
                            }
                        })
                        .catch(function (error) {
                            var requestErrorMessage =
                                    'We encountered an error processing your donation. To complete your monthly gift, please call <br/><a href="tel:1-800-733-2767">1-800-RED CROSS (1-800-733-2767)</a>.',
                                errorsElement = document.getElementById("sustainer-errors"),
                                errorsErrorElement = document.getElementById(
                                    "sustainer-errors_error"
                                );
                            console.error({
                                requestErrorMessage: requestErrorMessage,
                                error: error
                            });
                            errorsErrorElement.innerHTML = "".concat(requestErrorMessage);
                            errorsElement.classList.add("show");
                        });
                };
                donateButton.addEventListener("click", sendDonation);
                closeButton.addEventListener("click", declineSustainer);
                returnButton.addEventListener("click", closeSustainer);
            } else {
                sustainer.classList.remove("open");
            }
        }
    }
} catch (error) {
    var scriptErrorMessage = "A general error occurred in the SLB script.";
    console.error({
        error: error,
        scriptErrorMessage: scriptErrorMessage
    });
}

(function($, document){

    function init() {
        var tributeInfo = JSON.parse(window.sessionStorage.getItem('tributeCardInfo')) || {};
        tributeInfo.isMail = tributeInfo.type == 'MAIL';

        var source = $('#tribute-card-template');
        if(source && source.length) {
            var template = Handlebars.compile(source.html());
            $('#tribute-template-placeholder').append(template(tributeInfo));
        }
    };

    $(document).on('ready', function () {
        init();
    });

})(jQuery, document);
(function($, document){

    function getParameterByName(name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    }

    function checkForTribute() {
        var donorInfo = JSON.parse(window.sessionStorage.getItem('donorInfo'));
        if (donorInfo && donorInfo != undefined) {
            var tributeSection = $('.tribute-card.parbase');
            if (!donorInfo.hasDedication) {
                tributeSection.hide();
            } else {
                tributeSection.show();
            }
        }
    }

    function init() {
        var id = getParameterByName('id');
        var referenceId = getParameterByName('referenceNumber');
        if (digitalData["itemArray"]) {
            digitalData.itemArray["referenceId"] = referenceId;
        }
        if (id !== null && id !== '') {
            window.sessionStorage.setItem('donationId', id);
        }
        checkForTribute();
    }

    var cookieName = 'donationSubmitted',
        checkForSubmission = function () {
            var donated = false;

            if (sessionStorage.getItem(cookieName) === 'true') {
                donated = true;
            }
            return donated;
        },
        donated = checkForSubmission(),
        fromDonation = function() {
            var url = window.location.href,
                donorInfo = sessionStorage.donorInfo ? JSON.parse(sessionStorage.donorInfo) : {},
                defaultUrl = url.split('donate/')[0] + 'donate/donation.html';
            if (donorInfo.entityId) {
                getEntityUrl(donorInfo.entityId).done(function (data) {
                    if (Object.keys(data).length > 0) {
                        redirect(data.url);
                    } else {
                        redirect(defaultUrl);
                    }
                });
            } else {
                redirect(defaultUrl);
            }
        },
        redirect = function(newUrl) {
            if (!donated) { // Do something if you didn't come from a donation flow
                window.location = newUrl;
            } else {
                removeFlowCookie();
            }
        },
        removeFlowCookie = function() {
            sessionStorage.removeItem(cookieName);
        },
        getEntityUrl = function(entityId) {
            return $.ajax({
                url: '/bin/donation-id-url.id=' + entityId + '.json',
                type: 'GET'
            })
            .fail(function (data) {});
        };

    $(document).on('ready', function () {
        init();
        if ($('.confirmation-page').length > 0 && $('body.publish').length > 0) {
            fromDonation();
        }
    });



})(jQuery, document);




async function DoubleTheDonation() {
    try {
        // Container Version
        if (window.doublethedonation) {
            if (!!document.getElementById('dd-container')) {
                let ssDonorInfo = JSON.parse(sessionStorage.getItem('donorInfo')),
                    dtdInfo = JSON.parse(sessionStorage.getItem('dtdInfo')),
                    dtdCookieGet = async (cookieName, donorInfoSubstitute) => {
                        let chromeCookieObj, chromeCookie, safariFFCookie
                        try {
                            chromeCookieObj = await CookieStore.get(),
                                chromeCookie = chromeCookieObj.value
                        } catch (e) {
                            null
                        }
                        try {
                            safariFFCookie = Cookies.get(cookieName)
                        } catch (e) {
                            null
                        }
                        if (!!chromeCookie) {
                            return chromeCookie
                        }
                        if (!!safariFFCookie) {
                            return safariFFCookie
                        }
                        return donorInfoSubstitute
                    },
                    sCodeValue = await dtdCookieGet('scode', ssDonorInfo.sourceCode),
                    subCodeValue = await dtdCookieGet('subcode', ssDonorInfo.subSourceCode),
                    cidValue = await dtdCookieGet('cid', ssDonorInfo.entityId),
                    campaignString = `${sCodeValue}--${subCodeValue}--${cidValue}`,
                    ddDonationObject = {
                        "360matchpro_public_key": DDCONF.API_KEY,
                        "campaign": campaignString,
                        "donation_identifier": sessionStorage.getItem('donationSupportId'),
                        "donation_amount": parseFloat(ssDonorInfo.donationAmount),
                        "donor_first_name": ssDonorInfo.firstName,
                        "donor_last_name": ssDonorInfo.lastName,
                        "donor_email": ssDonorInfo.email,
                        "donor_address": {
                            "zip": ssDonorInfo.address_postal_code,
                            "city": ssDonorInfo.address_city,
                            "state": ssDonorInfo.address_state,
                            "address1": ssDonorInfo.address_line1,
                            "address2": ssDonorInfo.address_line2,
                            "country": ssDonorInfo.address_country
                        },
                        "donor_phone": ssDonorInfo.phone_billing,
                        "donation_datetime": new Date(ssDonorInfo.donationDate).toISOString(),
                    }
                // Add a couple extra fields if they exist. Otherwise, it'll use the email and/or the search box
                if (!!dtdInfo) {
                    if (!!dtdInfo.dtdEnteredText && dtdInfo.dtdEnteredText.length > 0) {
                        ddDonationObject.doublethedonation_entered_text = dtdInfo.dtdEnteredText
                    }
                    if (!!dtdInfo.dtdCompanyName && dtdInfo.dtdCompanyName.length > 0) {
                        ddDonationObject.doublethedonation_company_name = dtdInfo.dtdCompanyName
                    }
                    if (!!dtdInfo.dtdCompanyId && dtdInfo.dtdCompanyId.length > 0) {
                        ddDonationObject.doublethedonation_company_id = parseInt(dtdInfo.dtdCompanyId)
                    }
                }
                doublethedonation.integrations.core.register_donation(ddDonationObject);
                let dtd_selected_company = ddDonationObject.doublethedonation_company_id || null;
                // Fill search box that will associate company with donation via API calls if not yet applied
                doublethedonation.plugin.set_donation_identifier(sessionStorage.getItem('donationSupportId'));
                doublethedonation.plugin.set_donation_campaign(campaignString);
                if (dtd_selected_company) {
                    doublethedonation.plugin.set_company(dtd_selected_company);
                } else {
                    var domain = doublethedonation.integrations.core.strip_domain(ssDonorInfo.email);
                    doublethedonation.plugin.email_domain(domain);
                }
            }
        }

        function setupDTDListener() {
            let submitButtonElement = document.querySelector(`button[type="submit"]`),
                dtdEnteredTextElement = document.querySelector("input[name='doublethedonation_entered_text']"),
                dtdCompanyNameElement = document.querySelector("input[name='doublethedonation_company_name']"),
                dtdCompanyIdElement = document.querySelector("input[name='doublethedonation_company_id']"),
                dtdCheck = !!dtdEnteredTextElement && !!dtdCompanyNameElement && dtdCompanyIdElement
            if (!!submitButtonElement && dtdCheck) {
                submitButtonElement.addEventListener('click', () => {
                    let dtdEnteredText = !!dtdEnteredTextElement ? dtdEnteredTextElement?.value : null,
                        dtdCompanyName = !!dtdCompanyNameElement ? dtdCompanyNameElement?.value : null,
                        dtdCompanyId = !!dtdCompanyIdElement ? dtdCompanyIdElement?.value : null
                    let dtdInfoObject = {dtdEnteredText, dtdCompanyName, dtdCompanyId}
                    sessionStorage.setItem('dtdInfo', JSON.stringify(dtdInfoObject))
                })
            }
        }

        // MutationObserver for dd-company-name-input
        if (window.doublethedonation && !document.getElementById('dd-container')) {
            sessionStorage.setItem('dtdInfo', JSON.stringify({
                dtdEnteredText: "",
                dtdCompanyName: "",
                dtdCompanyId: ""
            }))
            let DocumentObserver = new MutationObserver(function (mutations) {
                if (!!document.getElementById('dd-company-name-input')) {
                    doublethedonation.plugin.load_streamlined_input();
                    setupDTDListener();
                    document.getElementById('dtdInputLabelRow').style.display = "flex"
                    DocumentObserver.disconnect();
                    Array.from(document.getElementsByClassName('payment-type')).forEach((type) => {
                        type.addEventListener('click', () => {
                            if (!!document.getElementById('dd-company-name-input')) {
                                doublethedonation.plugin.load_streamlined_input();
                                setupDTDListener();
                                document.getElementById('dtdInputLabelRow').style.display = "flex"
                            }
                        })
                    })
                }
            });
            DocumentObserver.observe(document, {
                attributes: false,
                childList: true,
                characterData: false,
                subtree: true
            });
        }
    } catch (error) {
        console.log({error})
    }
}

DoubleTheDonation();
(function($, document){

    function applyText(element, text) {
        if (element.length && text && text != undefined) {
            element.text(text);
        }
    }

    function getUrlVars()
    {
        var vars = [], hash;
        var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        for(var i = 0; i < hashes.length; i++)
        {
            hash = hashes[i].split('=');
            vars.push(hash[0]);
            vars[hash[0]] = hash[1];
        }
        return vars;
    }

    function init() {
        var dateDetails = $('.date-details span');
        var amountDetails = $('.amount-details span');
        var designationDetails = $('.designation-details span');
        var transactionDetails = $('.transaction-details span');

        var donorInfo = JSON.parse(window.sessionStorage.getItem('donorInfo'));
        if (donorInfo && donorInfo != undefined) {
            var date = formatDate(donorInfo.donationDate);
            var designation = donorInfo.designation;
            var amount;
            var perMonthText;
            if (donorInfo.donationAmount.length > 0 && donorInfo.donationAmount.indexOf(',') > 0) {
                var flatAmount = donorInfo.donationAmount.replace(/\,/g, '');
                amount = '$' + parseFloat(flatAmount).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,");
            } else {
                amount = '$' + parseFloat(donorInfo.donationAmount).toFixed(2);
            }

            if(donorInfo.frequency == 'monthly') {
                if($('.confirmation-copy-main.spanish').length > 0) {
                    perMonthText = 'por mes';
                } else {
                    perMonthText = 'per month';
                }
            } else {
                perMonthText = '';
            }
            var transactionID = getUrlParameter('donationSupportId');
            if (!transactionID) {
                 transactionID = window.sessionStorage.getItem('donationSupportId');
            }
            var urlVars = getUrlVars();

            applyText(dateDetails, date);
            applyText(amountDetails, amount + ' ' + perMonthText);
            applyText(designationDetails, designation);
            applyText(transactionDetails, transactionID);
        }
    }
    function formatDate(dateString) {
        return formatBasicDate(new Date(dateString)).replace(/\//g,"-");
    }

    $('.donation-details-wrapper').find('.print-receipt').on('click', 'button', function(e) {
        e.preventDefault();
	    window.print();
    });

    function setAttributeValue(){
        var aaButtonAttribute = 'data-aa-submit-button';
        var aaPrefix = 'print-receipt ';
        var buttons = $('.donation-details-wrapper').find('.redcross-submit-button button');
        if (buttons && buttons.length > 0) {
            var submitButton = buttons[0];
            var attributeValue = $(submitButton).attr(aaButtonAttribute);
            $(submitButton).attr(aaButtonAttribute, (aaPrefix + attributeValue));
        }
    }



    function getUrlParameter(name) {
        name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
        var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
        var results = regex.exec(location.search);
        return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
    }

    $(document).on('ready', function () {
        init();
        setAttributeValue();
    });

})(jQuery, document);
jQuery(function($) {
	if ($('.contributions-counter').length) {
		var counter = $('.contributions-counter'),
			donationId = counter.data('id'),
			donationsContainer = counter.find('.counter-amount'),
			donations = 0,
			contributionsContainer = counter.find('.number-of-contributions'),
			offlineDonations = counter ? (counter.data('offlineDonations') || 0) : 0,
			offlineContributionsCount = counter ? (counter.data('offlineContributionsCount') || 0) : 0,
			additionalOfflineContributionCounts = counter && counter.data('additionalOfflineContributions') != null ? counter.data('additionalOfflineContributions') + '' : "",
			totalAdditionalOfflineContributionsCount = additionalOfflineContributionCounts ? additionalOfflineContributionCounts.match(/\d+/g).reduce(function(a,b) {return +a + +b;}) : 0,
			additionalOfflineDonations = counter && counter.data('additionalOfflineDonations') != null ? counter.data('additionalOfflineDonations') + '' : "",
			totalAdditionalOfflineDonations = additionalOfflineDonations ? additionalOfflineDonations.match(/\d+/g).reduce(function(a,b) {return +a + +b;}) : 0,
			additionalThermometerCounterEntityIds = counter ? counter.data('additionalThermometerCounterEntityIds') || "" : "",
			contributions = 0;

		// Populate amounts
		var populateAmounts = function(donations, contributions) {
			// Convert number to have commas
			var donationsText = '',
				contributionsText = '',
				rgx = /(\d+)(\d{3})/,
				convertDonations = function() {
					var x = donations.toString().split('.'),
						x1 = x[0].replace(',', '');
					while (rgx.test(x1)) {
						x1 = x1.replace(rgx, '$1,$2');
					}
					donationsText = x1;
				},
				convertContributions = function() {
					var y1 = contributions.toString().replace(',', '');
					while (rgx.test(y1)) {
						y1 = y1.replace(rgx, '$1,$2');
					}
					contributionsText = y1;
				};
			
			convertDonations();
			convertContributions();
			
			// Print amounts on the page
			donationsContainer.text('$' + donationsText);
			contributionsContainer.text(contributionsText);
		};
		
		// Use the ID to get the donation amount and number of contributions
		var donationApi = document.getElementById('api-urls').getAttribute('data-api-donation');

		if(!!additionalThermometerCounterEntityIds) {
			$.ajax({
				url: donationApi + '/counters/multiple/' + donationId + ',' + additionalThermometerCounterEntityIds,
				contentType: "application/json;charset=UTF-8",
				dataType: 'json',
				type: 'GET',
				error: function() {
					populateAmounts(donations + offlineDonations + parseInt(totalAdditionalOfflineDonations), contributions + offlineContributionsCount + parseInt(totalAdditionalOfflineContributionsCount));
				},
				success: function(data) {
					let donationsTotal = 0;
					let contibutionsTotal = 0;
					data.forEach((counterData) => {
						donationsTotal += counterData.donations;
						contibutionsTotal += counterData.contributions
					});

					donations = donationsTotal + offlineDonations + parseInt(totalAdditionalOfflineDonations);
					contributions = contibutionsTotal + offlineContributionsCount + parseInt(totalAdditionalOfflineContributionsCount);
					populateAmounts(donations, contributions);
				}
			});
		} else {
			$.ajax({
				url: donationApi + '/counters/' + donationId,
				contentType: "application/json;charset=UTF-8",
				dataType: 'json',
				type: 'GET',
				error: function() {
					populateAmounts(donations + offlineDonations, contributions + offlineContributionsCount);
				},
				success: function(data) {
					donations = data.donations + offlineDonations;
					contributions = data.contributions + offlineContributionsCount;
					populateAmounts(donations, contributions);
				}
			});
		}
		
	}
});
(function($, document){
    var loading = false;
    function init(callback) {
        var donorInfo = JSON.parse(window.sessionStorage.getItem('donorInfo'));
        if (donorInfo && donorInfo != undefined) {
            if(donorInfo.hasDedication === true) {
                $('.tribute-card-main').removeClass('hidden');
                window.sessionStorage.setItem('tributeInProgress', 'true');
                if (getUrlParameter('donationSupportId')){ // we came from a sop flow so grey out submit button create card and display spinner
                    createTributeCard(donorInfo);
                }
            } else {
                window.sessionStorage.setItem('tributeInProgress', 'false');
            }
        }
        if ($('.confirmation-page').length > 0) {
            callback();
        }
    }
    function dontLeave() {
        var tributeStatus = window.sessionStorage.getItem('tributeInProgress');

        if (tributeStatus && tributeStatus === 'true') {
            window.addEventListener('beforeunload', popUp, false);
        }
        document.getElementsByClassName('tribute-submit')[0].querySelectorAll('a')[0].addEventListener('click', function (e) {
            e.stopPropagation();
            window.removeEventListener('beforeunload', popUp, false);
        }, true);
    }
    function popUp(event) {
        var confirmationMessage = "You haven't chosen when to send the card. Are you sure you want to leave this page?";
        $('.unfinished-tribute').addClass('active'); // If we put an element on the page to say why they shouldn't leave yet. Since the custom message doesn't display.
        event.returnValue = confirmationMessage;     // Gecko, Trident, Chrome 34+ - Custom message is ignored
        return confirmationMessage;              // Gecko, WebKit, Chrome <34
    }

    $(document).on('ready', function () {
        init(function() {
            dontLeave();
        });
    });

    $('.tribute-submit').on('click', 'a', function(e) {
        if (!loading) {
            window.removeEventListener("beforeunload");
        } else {
            e.preventDefault();
        }
    });

    function createTributeCard(donorInfo) {
        var card = {};
        var subscriptionTransaction = getUrlParameter('initialTransactionId');
        if (subscriptionTransaction) {
            card.donationId = subscriptionTransaction;
            sessionStorage.setItem('donationId', subscriptionTransaction);
        } else {
            card.donationId = sessionStorage.getItem('donationId');
        }
        if (donorInfo.donationAmount && donorInfo.donationAmount !== 'undefined') {
            card.donationAmount = donorInfo.donationAmount.replace(/([,])/g, '');
        }
        card.includeDonationAmount = true;
        if (!donorInfo.dedicationValue) {
            card.honoreeName = ' ';
        } else {
            card.honoreeName = donorInfo.dedicationValue;
        }
        card.donorFirstName = donorInfo.firstName;
        card.donorLastName = donorInfo.lastName;
        card.donorEmail = donorInfo.email;
        card.tributeFrom = donorInfo.firstName + ' ' + donorInfo.lastName;
        createTributeRequest(card, donorInfo);
    }

    function createTributeRequest(card, donorInfo) {
        showLoading();
        $.ajax({
            url: $('#api-urls').data('api-tribute') + '/cards',
            contentType: 'application/json; charset=UTF-8',
            dataType: 'json',
            type: 'POST',
            data: JSON.stringify(card)
        }).done(function(data) {
            var json = data;
                json.completed = false;
                json.donationAmount = donorInfo.donationAmount;
            sessionStorage.setItem('tributeCardInfo', JSON.stringify(json));
            hideLoading();
        }).fail(function(jqXHR, textStatus) {
            if (jqXHR.status === 422) {
                hideLoading(); //generally we should just get a 422 if the card is already created so we can let them proceed to send it.
            } else {
                var errorUrl = '/content/redcross/en/errors/500.html';
                window.location.href = window.location.origin + errorUrl;
            }
        });
    }

    function showLoading() {
        var buttonEl = $('.tribute-submit').find('button');
        buttonEl.removeClass('red');
        buttonEl.addClass('tribute-button-disabled');
        $('.spinner-cont').show();
        loading = true;
    }
    function hideLoading() {
        var buttonEl = $('.tribute-submit').find('button');
        $('.spinner-cont').hide();
        buttonEl.removeClass('tribute-button-disabled');
        buttonEl.addClass('red');
        loading = false;
    }

    function getUrlParameter(name) {
        name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
        var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
        var results = regex.exec(location.search);
        return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
    }
})(jQuery, document);
(function($, document){

    if ($('.premium-shipping-address-main').length) {
        var loading = false;
        var premiumSubmitBtn = $('#formDiv button[type="submit"]')
        function init(callback) {
            var donorInfo = JSON.parse(window.sessionStorage.getItem('donorInfo'));
            if (donorInfo && donorInfo != undefined) {
                if(donorInfo.haspremiumoptin === true) {
                    $('.premium-shipping-address-main').removeClass('hidden');
                  window.sessionStorage.setItem('premiumOptInProgress', 'true');

                } else {
                    window.sessionStorage.setItem('premiumInProgress', 'false');
                }
            }
            if ($('.confirmation-page').length > 0) {
                callback();
            }
        }


        function dontLeave() {
            var premiumOptInStatus = window.sessionStorage.getItem('premiumOptInProgress');

            if (premiumOptInStatus && premiumOptInStatus === 'true') {
                window.addEventListener('beforeunload', popUp, false);
            }
        }
        function popUp(event) {
            var confirmationMessage = "You haven't provided a shipping address. Are you sure you want to leave this page?";
            $('.unfinished-premium-shipping-address').addClass('active'); // If we put an element on the page to say why they shouldn't leave yet. Since the custom message doesn't display.
            event.returnValue = confirmationMessage;     // Gecko, Trident, Chrome 34+ - Custom message is ignored
            return confirmationMessage;              // Gecko, WebKit, Chrome <34
        }
        $.ajaxSetup({
        contentType: 'application/json'
        });
        $(document).on('ready', function () {
            init(function() {
                dontLeave();
            });
        });

        function formIsValid() {
            var errorSpan = $('.premium-opt-in-addresses-section span');
            var name= $('#name').val();
            var addressone= $('#addressone').val();
            var city= $('#city').val();
            var state= $('#state').val();
            var zip= $('#zip').val();
            var transactionID = getUrlParameter('id');
            var paymentType = window.sessionStorage.getItem('pay_type');
            if(paymentType == 'paypal' || paymentType == 'apple-pay'||paymentType=="credit-card") {
                 if(transactionID == "" || transactionID == null)
                     transactionID = window.sessionStorage.getItem('donationId'); 
            }
            var text = "all fields";
            if(transactionID==""||transactionID==null)
            {
                errorSpan.text("Missing property: transactionID.");
                return false;
            }
            if(name==""||name==null)
            {
                var label = $('#formDiv label[for="name"]');
                if (label.length) {
                    text = label.text().toLowerCase();
                }
                errorSpan.text("Please enter " + text + ".");
                return false;
            }
            if(addressone==""||addressone==null)
            {
                var label = $('#formDiv label[for="addressone"]');
                if (label.length) {
                    text = label.text().toLowerCase();
                }
                errorSpan.text("Please enter " + text + ".");
                return false;
            }
            if(city==""||city==null)
            {
                var label = $('#formDiv label[for="city"]');
                if (label.length) {
                    text = label.text().toLowerCase();
                }
                errorSpan.text("Please enter " + text + ".");
                return false;
            }
            if(state==""||state==null)
            {
                var label = $('#formDiv label[for="state"]');
                if (label.length) {
                    text = label.text().toLowerCase();
                }
                errorSpan.text("Please enter " + text + ".");
                return false;
            }
            if(zip==""||zip==null)
            {
                var label = $('#formDiv label[for="zip"]');
                if (label.length) {
                    text = label.text().toLowerCase();
                }
                errorSpan.text("Please enter " + text + ".");
                return false;
            }
            return true;
        }
        function disablePremiumButton() {
            premiumSubmitBtn.attr("disabled", true);
        }
        function enablePremiumButton() {
            premiumSubmitBtn.removeAttr("disabled");
        }
        function checkFormIsComplete() {
            if ($('#name').val() !== "" && $('#addressone').val() !== "" && $('#city').val() !== "" && $('#state').val() !== "" && $('#zip').val().length >= 5) {
                enablePremiumButton();
            }
            else {
                disablePremiumButton();
            }
        }
        $("#formDiv input, #formDiv select").on("input", checkFormIsComplete);
        $("#formDiv").submit(function(e) {
            e.preventDefault();
            var name= $('#name').val();
            var addressone= $('#addressone').val();
            var addresstwo= $('#addresstwo').val();
            var city= $('#city').val();
            var state= $('#state').val();
            var zip= $('#zip').val();
            var transactionID = getUrlParameter('initialTransactionId') || getUrlParameter('id') || window.sessionStorage.getItem('donationId');
            var type = getUrlParameter('type') || window.sessionStorage.getItem('donationFrequency');
            var paymentType = window.sessionStorage.getItem('pay_type');
            if (formIsValid()) {
                window.removeEventListener('beforeunload', popUp, false);
                var data;
                type = type.toUpperCase();
                data = JSON.stringify({
                    "id": transactionID,
                    "addressee": name,
                    "addressLineOne": addressone,
                    "addressLineTwo": addresstwo,
                    "city": city,
                    "state": state,
                    "postalCode": zip,
                    "type": type,
                    "exposeId": "",
                    "paymentType": paymentType
                });
                var handle201 = function(data, textStatus, jqXHR) {
                     $("#formDiv").hide();
                     $("#titleDiv").html('');
                     $("#descDiv").hide();
                     $("#msg").show();
                };
                var url = $("#api-urls").data("api-donation");
                if (url) {
                    $.ajax({
                        url: url + '/transactions/premiumoptin',
                        type: 'post',
                        data: data,
                        headers: {
                        "Content-Type":"application/json"
                        },
                        dataType: 'json',
                           statusCode: {
                            200: handle201,
                            201: handle201
                        },
                        success: function (data) {
                            console.info(data);
                            $("#formDiv").hide();
                            $("#msg").show();
                        },
                        error: function(jqXHR, textStatus) {
                            var error = $('.premium-opt-in-addresses-section .error');
                            error.text("There was an error while attempting to submit this form. Please try again in a couple minutes.");
                            console.error(jqXHR);
                        }
                    });
                }
                else {
                    var error = $('.premium-opt-in-addresses-section .error');
                    error.text("There was an error while attempting to submit this form. Could not parse submission url.");
                }
            }
            else {
                disablePremiumButton();
                return false;
            }

         });
    }
    $('#name').on('keypress', function (event) {
        var regex = new RegExp("^[a-zA-Z'` -]+$");
        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
        if (!regex.test(key)) {
            event.preventDefault();
            return false;
        }
    });
    $('#addressone,#addresstwo,#city').on('keypress', function (event) {
        var regex = new RegExp("^[a-zA-Z0-9 &#,./-]+$");
        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
        if (!regex.test(key)) {
            event.preventDefault();
            return false;
        }
    });

    $('#zip').on('keypress', function (event) {
        var regex = new RegExp("^[0-9]+$");
        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
        if (!regex.test(key)) {
            event.preventDefault();
            return false;
        }
    });

})(jQuery, document);

(function($, document){
    function init() {
        var donorInfo = JSON.parse(window.sessionStorage.getItem('donorInfo')) || {};

        if(donorInfo.frequency === "monthly") {
            var showThese = $(".monthly-dynamic-confirmation-content");
            showThese.removeClass("hidden");
        }
    };

    $(document).on('ready', function () {
        init();
    });
})(jQuery, document);
(function($, document){
    function init() {
        var donorInfo = JSON.parse(window.sessionStorage.getItem('donorInfo')) || {};

        if(donorInfo.entityId) {
            var showThese = $(".dynamic-confirmation-content[data-dynamic-donation-entity-id='"+donorInfo.entityId+"']");
            showThese.removeClass("hidden");
        }
    };

    $(document).on('ready', function () {
        init();
    });
})(jQuery, document);
(function($, document){

    function init() {
        var donorInfo = JSON.parse(window.sessionStorage.getItem('donorInfo')) || {};
        var isEditMode = $('#confirmation-cta-copy-template-placeholder').hasClass('edit');
        if(isEditMode) {
            donorInfo.confirmationCtaIcon = "fa rco-ui-icon-blood";
            donorInfo.confirmationCtaHeadline = '{{confirmationCtaHeadline}}';
            donorInfo.confirmationCtaText = '{{confirmationCtaText}}';
            donorInfo.confirmationCtaButtonText = '{{confirmationCtaButtonText}}';
            donorInfo.confirmationCtaButtonUrl = '/confirmationCtaButtonUrl.html';
        }

        var source = $('#confirmation-cta-template');
        if(source && source.length) {
            var html = source.html();
            var template = Handlebars.compile(html);
            $('#confirmation-cta-copy-template-placeholder').append(template(donorInfo));
        }
    };

    $(document).on('ready', function () {
        init();
    });

})(jQuery, document);
(function($, document){

    function init() {
        var donorInfo = JSON.parse(window.sessionStorage.getItem('donorInfo')) || {};
        var isEditMode = $('#confirmation-copy-template-placeholder').hasClass('edit');

        if (isEditMode) {
            donorInfo.firstName = '{{firstName}}';
            donorInfo.lastName = '{{lastName}}';
            donorInfo.companyName = '{{companyName}}';
            donorInfo.donationAmount = '{{donationAmount}}';
            donorInfo.perMonthText = '{{perMonthText}}';
            donorInfo.donationDate = '{{donationDate}}';
            donorInfo.designation = '{{designation}}';
            donorInfo.email = '{{email}}';
        } else {
            if (donorInfo.donationAmount && donorInfo.donationAmount.length > 0 && donorInfo.donationAmount.indexOf(',') > 0) {
                var flatAmount = donorInfo.donationAmount.replace(/\,/g, '');
                donorInfo.donationAmount = parseFloat(flatAmount).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,");
            } else {
                donorInfo.donationAmount = parseFloat(donorInfo.donationAmount).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,");
            }

            donorInfo.company_preamble = donorInfo.company_preamble ? donorInfo.company_preamble : 'on behalf of';
            var dedicationMessage = donorInfo.hasOrganization ? donorInfo.company_preamble + ' ' + donorInfo.organization : '';
            donorInfo.companyName = dedicationMessage;

            if(donorInfo.frequency === 'monthly') {
                if($('.confirmation-copy-main.spanish').length > 0) {
                    donorInfo.perMonthText = 'por mes';
                } else {
                    donorInfo.perMonthText = 'per month';
                }
            } else {
                donorInfo.perMonthText = '';
            }
        }

        var source = $('#confirmation-copy-template');
        if(source && source.length) {
            var html = source.html();

            // Remove extra space from the company and preamble.
            if (!isEditMode && !donorInfo.hasOrganization) {
                html = removeCharacterBeforeString(html,'{{companyName}}');
            }

            // Remove extra space from the frequency text.
            if (!isEditMode && donorInfo.frequency !== 'monthly') {
                html = removeCharacterBeforeString(html,'{{perMonthText}}');
            }

            var template = Handlebars.compile(html);
            $('#confirmation-copy-template-placeholder').append(template(donorInfo));
        }
    };

    function removeCharacterBeforeString(baseString, searchString) {
        var index = baseString.indexOf(searchString);
        return baseString.slice(0, index - 1) + baseString.slice(index);
    }

    $(document).on('ready', function () {
        init();
    });

})(jQuery, document);
(function($, document) {
  $(document).ready(function() {
    $('.content-card-with-zip form').each(function() {
      var $this = $(this);
      var $zipSponsor = $this.find('[name="zipSponsor"]');
      var $searchButton = $this.find('.search-cta-button a');
      var $zipError = $this.find('.search-bar-error');

      $zipSponsor
        .keydown(function(event) {
          if (event.keyCode === 13) {
            event.preventDefault();
            doQuery();
          }
        })
        .blur(function(event) {
          validateZip();
        });

      $searchButton.click( function(event) {
        event.preventDefault();
        doQuery();
      });

      function doQuery() {
        if (validateZip()) {
          var dt = $this.data('search-type');
          let radius = dt == "PL" ? '&range=25' : '';
          var url = $searchButton.attr('href') + '/drive-results?dt=' + dt +
              '&zipSponsor=' + $zipSponsor.val() + radius;
          var target = $searchButton.attr('target') || '_self';
          window.open(url, target);
        }
      }

      function validateZip(){
        var val = $zipSponsor.val();
        var good = true;

        if(!val) {
          $zipError.text($zipError.data('empty-error'));
          good = false;
        } else if (val.length < 5) {
          $zipError.text($zipError.data('too-short'));
          good = false;
        }
          var errorDiv = $zipSponsor.next();
          var errorMsg = errorDiv.attr('data-empty-error');
        if(good) {
          $zipSponsor.removeClass('error-state');
          errorDiv.attr('data-aa-content-card-zipcode-error', '');
          $zipError.text('');
        } else {
          $zipSponsor.addClass('error-state');
          errorDiv.attr('data-aa-content-card-zipcode-error', 'zip ' + $zipError.text());
        }
        return good;
      }
    });
    $('.content-card-with-zip').attr('data-context', 'content-card-with-zip');
    $('.content-card-with-zip .object-fit-image-container').attr('style', '');
  });
})(jQuery, document);
jQuery(function($) {
    var spinner$ =  $('.fa-spinner-loading'),
        email$ = $('.sso-login-form-input-email'),
        password$ = $('.sso-login-form-input-pass'),
        emailError$ = $('.sso-login-error-label-email'),
        loginLink$ = $('.sso-login-link-forgot'),
        loginSubmit$ = $('.sso-login-submit'),
        responseError$ = $('.sso-login-error-label-response'),
        emailRegex = '',
        passRegex = '';
        getValidations();
        placeBorder();

    checkInput();

    loginLink$.on( "click", function() {
        createCookie('ArcForgotPassword',(window.location.pathname + window.location.search),7)
    });

    email$.keyup(function() {
        checkInput();
    });
    password$.keyup(function() {
        checkInput();
    });

    email$.keypress(function (e) {
        if (e.which == 13) {
          formSubmit();
        }
    });
    
    password$.keypress(function (e) {
        if (e.which == 13) {
          formSubmit();
        }
    });

    email$.blur(function (e) {
        checkEmail();
    });

    loginSubmit$.on( "click", function() {
        formSubmit();
    });

    function checkInput() {
        var emptyInput = false;
        if (email$.val() === '') {
            emptyInput = true;
            loginSubmit$.addClass('sso-login-submit-disabled');
            loginSubmit$.removeClass('sso-login-submit-active');
        }
        if (password$.val() === '') {
            emptyInput = true;
            loginSubmit$.addClass('sso-login-submit-disabled');
            loginSubmit$.removeClass('sso-login-submit-active');
        }

        if (!emptyInput) {
            loginSubmit$.addClass('sso-login-submit-active');
            loginSubmit$.removeClass('sso-login-submit-disabled');
        }
    }

    function postData(){
        spinner$.show();
        var apiEndpoint = $( '#api-urls' ).data( 'api-sso' );
        var payload = {
            login: email$.val(),
            password: password$.val()
        };
        $.ajax({
            url: apiEndpoint +'/login',
            contentType: "application/json;charset=UTF-8",
            dataType: 'json',
            type: 'POST',
            data: JSON.stringify(payload)
        }).done(function(data) {
            spinner$.hide();
            window.location.href = data.redirectUrl;
        }).fail(function(jqXHR, textStatus) {
            spinner$.hide();
            responseError$.show();
        });
    }


    function createCookie(name, value, days) {
        var expires;

        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = "; expires=" + date.toGMTString();
        } else {
            expires = "";
        }
        document.cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value) + expires + "; path=/";
    }

    function formSubmit() {
        responseError$.hide();
        if (email$.val() !== '' && password$.val() !== '') {
            postData();
        }
    }

    function getValidations() {
        var apiEndpoint = $( '#api-urls' ).data( 'api-lookup' );
        $.ajax({
            url: apiEndpoint +'/validation-patterns',
            contentType: "application/json;charset=UTF-8",
            dataType: 'json',
            type: 'GET',
        }).done(function(data) {
            emailRegex = new RegExp(data.email);
        }).fail(function(jqXHR, textStatus) {

        });
    }

    function checkEmail() {
        if (emailRegex !== '') {
            var validEmail = emailRegex.test(email$.val());
            if (!validEmail) {
                passedValidation = false;
                emailError$.show();
                email$.addClass('sso-login-input-error')
            } else {
                emailError$.hide();
                email$.removeClass('sso-login-input-error');
            }
        }
    }

    function placeBorder() {
        if ($('.par-1').find('.sso-login-wrapper').length >= 0) {
            $('.par-1').find('.sso-login-wrapper').addClass('sso-border-right');
        }

        if ($('.par-1').find('.sso-login-wrapper').length === 0 && ($('.par-2').find('.sso-login-wrapper').length >= 0 || $('.par-3').find('.sso-login-wrapper').length >= 0 || $('.par-4').find('.sso-login-wrapper').length >= 0)) {
            $('.par-2').find('.sso-login-wrapper').addClass('sso-border-left');
        }
    }

});

jQuery(function($) {
    var firstRegex = '',
        lastRegex = '',
        emailRegex = '',
        currentPostalRegex = '',
        passwordRegex = '',
        confirmRegex = '';
        getValidations('US');
        placeBorder();

    var createSubmit$ = $('.sso-create-submit'),
        spinner$ = $('.fa-spinner-loading-c'),
        firstName$ = $('#firstInput'),
        firstError$ = $('#firstError'),
        lastName$ = $('#lastInput'),
        lastError$ = $('#lastError'),
        country$ = $('#countryInput'),
        postal$ = $('#postalInput'),
        postalError$ = $('#postalError'),
        emailInput$ = $('#emailInput'),
        emailError$ = $('#emailError'),
        passwordInput$ = $('#passwordInput'),
        passwordError$ = $('#passwordError'),
        confirmInput$ = $('#confirmInput'),
        confirmError$ = $('#confirmError'),
        submissionError$ = $('#submissionError'),
        accountLoginError$ = $('#accountLoginError'),
        createAccountButton$ = $('#sso-create-account-button'),
        legalTrigger$ = $('#legalTrigger'),
        legalTextCont$ = $('.legal-text-cont'),
        elementArr = [firstError$, lastError$, postalError$, emailError$, passwordError$, confirmError$],
        fieldArr = [firstName$, lastName$, country$, postal$, emailInput$, passwordInput$, confirmInput$];

    var emptyFieldPass = false,
        forgotPath = createSubmit$.data('forgot-path');

    $.each(fieldArr, function() {
        $(this).keyup(function(e) {
            emptyFieldPass = true;
            $.each(fieldArr, function() {
                if ($(this).val() === '') {
                    emptyFieldPass = false;
                }
            })
            if (emptyFieldPass) {
                enableButton();
            } else if (!createSubmit$.hasClass('.sso-login-submit-disabled')) {
                disableButton();
            }
            
            //enter submit
            if (e.which == 13) {
                submitForm();
            }
        });
    })

    //postal regex switching based on country
    country$.change(function() {
        var val = country$.val();
        getValidations(val);
    });

    createSubmit$.on( "click", function() {
        submitForm();
    });


    legalTrigger$.on( "click", function() {
        legalTextCont$.toggle();
    });

    function validateFields() {
        var formErrors = false;
        confirmError$.text('Password does not meet password requirements');
        var validFirst = firstRegex.test(firstName$.val()),
        validLast = lastRegex.test(lastName$.val()),
        validPostal = currentPostalRegex.test(postal$.val()),
        validEmail = emailRegex.test(emailInput$.val()),
        validPassword = passwordRegex.test(passwordInput$.val()),
        validConfirmation = confirmRegex.test(confirmInput$.val()),
        validArr = [validFirst, validLast, validPostal, validEmail, validPassword, validConfirmation];
        
        for (var i = 0; i < validArr.length; i++) {
            if (!validArr[i]) {
                elementArr[i].show();
                formErrors = true;
            }
        }

        if (passwordInput$.val() !== confirmInput$.val()) {
            formErrors = true;
            confirmError$.text('New password and confirm password do not match.');
            confirmError$.show();
        }

        if (!formErrors) {
            postData();
        } else {
            enableButton();
        }
    }
    
    function resetValidations() {
        for (var i = 0; i < elementArr.length; i++) {
            elementArr[i].hide();
        }
        submissionError$.hide();
    }

    function postData(){
        spinner$.show();
        disableButton();
        var apiEndpoint = $( '#api-urls' ).data( 'api-account' );
        var payload = {
            email: emailInput$.val(),
            password: passwordInput$.val(),
            personalInfo: {
                firstName: firstName$.val(),
                lastName: lastName$.val(),
                country: country$.val(),
                postalCode: postal$.val(),
            }
        };
        $.ajax({
            url: apiEndpoint +'/account',
            contentType: "application/json;charset=UTF-8",
            dataType: 'json',
            type: 'POST',
            data: JSON.stringify(payload)
        }).done(function(data) {
            login();
        }).fail(function(data) {
            spinner$.hide();
            submissionError$.text('An error was encountered while creating your account. Please try again later.');
            if (data.responseJSON.errors['409']) {
                submissionError$.html('This email address ' + emailInput$.val() + ' already exists on www.RedCross.org. If this is your account, please use your existing password for www.RedCross.org. Otherwise, you can <a href='+forgotPath+'>reset your password</a> or create a new account with a unique email address.');
            }
            enableButton();
            submissionError$.show();
        });
    }


    function getValidations(country) {
        var apiEndpoint = $( '#api-urls' ).data( 'api-lookup' );
        $.ajax({
            url: apiEndpoint +'/validation-patterns?country=' + country,
            contentType: "application/json;charset=UTF-8",
            dataType: 'json',
            type: 'GET',
        }).done(function(data) {
            firstRegex = new RegExp(data.firstName);
            lastRegex = new RegExp(data.lastName);
            emailRegex = new RegExp(data.email);
            passwordRegex = new RegExp(data.passwordWeak);
            confirmRegex = new RegExp(data.passwordWeak);
            currentPostalRegex = new RegExp(data.postalCode);
        }).fail(function(jqXHR, textStatus) {
            
        });
    }
    
    function submitForm() {
        resetValidations();
        validateFields();
    }
    function disableButton() {
        createAccountButton$.attr('disabled','true');
        createAccountButton$.addClass('sso-login-submit-disabled');
        createAccountButton$.removeClass('sso-login-submit-active');
    }
    function enableButton() {
        createAccountButton$.removeAttr('disabled');
        createAccountButton$.removeClass('sso-login-submit-disabled');
        createAccountButton$.addClass('sso-login-submit-active');
    }

    function login(){
        var apiEndpoint = $( '#api-urls' ).data( 'api-sso' );
        var payload = {
            login: emailInput$.val(),
            password: passwordInput$.val()
        };

        var ajaxSettings = {
            url: apiEndpoint +'/login',
            contentType: "application/json;charset=UTF-8",
            dataType: 'json',
            type: 'POST',
            data: JSON.stringify(payload)
        };
        var originalWait = 4000;
        var retryWait = 4000;
        var retryCount = 0;
        var maxRetries = 10;

        setTimeout(function() {
            // Run initial ajax after original wait time
            $.ajax(ajaxSettings).done(function(data){onSuccess(data)}).fail(function(jqXHR){onFail(jqXHR)});

            // On success, open redirect url
            function onSuccess(data) {
                spinner$.hide();
                window.location.href = data.redirectUrl;
            }
            // On fail, retry if under max number of retries and API status is 401
            function onFail(jqXHR){
                if ((retryCount++ < maxRetries) && (jqXHR.status == 401)) {
                    setTimeout(function(){
                        $.ajax(ajaxSettings).done(function(data){onSuccess(data)}).fail(function(jqXHR){onFail(jqXHR)});
                    }, retryWait);
                }
                else if (jqXHR.status == 401) {
                    spinner$.hide();
                    accountLoginError$.show()
                }
                else {  
                    spinner$.hide();
                    submissionError$.show();
                }
            }
        }, originalWait);
    }
    
    function placeBorder() {
        if ($('.par-1').find('.sso-login-wrapper').length >= 0) {
            $('.par-1').find('.sso-login-wrapper').addClass('sso-border-right');
        }
        
        if ($('.par-1').find('.sso-login-wrapper').length === 0 && ($('.par-2').find('.sso-login-wrapper').length >= 0 || $('.par-3').find('.sso-login-wrapper').length >= 0 || $('.par-4').find('.sso-login-wrapper').length >= 0)) {
            $('.par-2').find('.sso-login-wrapper').addClass('sso-border-left');
        }
    }

});


